(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e8bc2"],{"8b13":function(n,e,t){"use strict";var o,i=t("ade3");e["a"]=(o={effect1:function(){var n="\n\t\tuniform float iTime;\n\t\tconst float PI = 3.14159265359;\n\n\n        float random(float p){\n            return fract(sin(p) * 10000.0);\n        } \n        \n        float noise(vec2 p){\n            float t = iTime / 2000.0;\n            if(t > 1.0) t -= floor(t);\n            return random(p.x * 14. + p.y * sin(t) * 0.5);\n        }\n\n        vec2 sw(vec2 p){\n            return vec2(floor(p.x), floor(p.y));\n        }\n        \n        vec2 se(vec2 p){\n            return vec2(ceil(p.x), floor(p.y));\n        }\n        \n        vec2 nw(vec2 p){\n            return vec2(floor(p.x), ceil(p.y));\n        }\n        \n        vec2 ne(vec2 p){\n            return vec2(ceil(p.x), ceil(p.y));\n        }\n\n        float smoothNoise(vec2 p){\n            vec2 inter = smoothstep(0.0, 1.0, fract(p));\n            float s = mix(noise(sw(p)), noise(se(p)), inter.x);\n            float n = mix(noise(nw(p)), noise(ne(p)), inter.x);\n            return mix(s, n, inter.y);\n        }\n\n        mat2 rotate (in float theta){\n            float c = cos(theta);\n            float s = sin(theta);\n            return mat2(c, -s, s, c);\n        }\n\n        float circ(vec2 p){\n            float r = length(p);\n            r = log(sqrt(r));\n            return abs(mod(4.0 * r, PI * 2.0) - PI) * 3.0 + 0.2;\n        }\n\n        float fbm(in vec2 p){\n            float z = 2.0;\n            float rz = 0.0;\n            vec2 bp = p;\n            for(float i = 1.0; i < 6.0; i++){\n                rz += abs((smoothNoise(p) - 0.5)* 2.0) / z;\n                z *= 2.0;\n                p *= 2.0;\n            }\n            return rz;\n        }\n        float distanceTo(vec2 src, vec2 dst) {\n\t\t\tfloat dx = src.x - dst.x;\n\t\t\tfloat dy = src.y - dst.y;\n\t\t\tfloat dv = dx * dx + dy * dy;\n\t\t\treturn sqrt(dv);\n\t\t}\n\t\tvarying vec2 vUv; \n\t\tuniform vec2 iResolution; \n\t\tvoid main() { \n            float len = distanceTo(vec2(0.5, 0.5), vec2(vUv.x, vUv.y)) * 2.0; \n\n            vec2 p = (vUv - 0.5) * 8.0;\n            p.x *= iResolution.x / iResolution.y;\n            float rz = fbm(p);\n            p /= exp(mod(iTime * 2.0, PI));\n            rz *= pow(abs(0.1 - circ(p)), 0.9);\n            vec3 col = vec3(0.2, 0.1, 0.643); \n            \n\t\t\tgl_FragColor = vec4( col / rz ,  1.0 - pow(len, 3.0))  ;\n\t\t\t\n\t\t}\n\t\t";return n},effect2:function(){var n="\n\n\t\tconst float PI = 3.14159265359; \n        \n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n          \n\t\tvarying vec2 vUv;\n        float distanceTo(vec2 src, vec2 dst) {\n\t\t\tfloat dx = src.x - dst.x;\n\t\t\tfloat dy = src.y - dst.y;\n\t\t\tfloat dv = dx * dx + dy * dy;\n\t\t\treturn sqrt(dv);\n\t\t}\n\n        vec3 hsb2rgb( in vec3 c ){\n            vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                                     6.0)-3.0)-1.0,\n                             0.0,\n                             1.0 );\n            rgb = rgb*rgb*(3.0-2.0*rgb);\n            return c.z * mix( vec3(1.0), rgb, c.y);\n        }\n        \n        vec2 rotate2D (vec2 _st, float _angle) {\n            _st =  mat2(cos(_angle),-sin(_angle),\n                        sin(_angle),cos(_angle)) * _st;\n            return _st;\n        }\n        \n\t\tvoid main() {  \n            float len = distanceTo(vec2(0.5, 0.5), vec2(vUv.x, vUv.y)); \n            vec2 p = (vUv-0.5) * 4.0;\n            vec3 color = hsb2rgb(vec3(fract(iTime*.1),1.,1.));\n            float r = length(p);\n            float w = .3;\n            p = rotate2D(p,(r*PI*6.-iTime*2.));\n            color *= smoothstep(-w,.0,p.x)*smoothstep(w,.0,p.x);\n            color *= abs(1./(sin(pow(r,2.)*2.-iTime*1.3)*6.))*.4;\n            \n\t\t\tgl_FragColor = vec4(color,  pow(1.0 - len, 1.0))  ;\n\t\t\t\n\t\t}\n\t\t";return n},effect3:function(){var n='\n\n\t\tconst float PI = 3.14159265359; \n        \n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n          \n\t\tvarying vec2 vUv;\n        \n        vec3 firePalette(float i){\n\n            float T = 1400. + 1300.*i; // Temperature range (in Kelvin).\n            vec3 L = vec3(7.4, 5.6, 4.4); // Red, green, blue wavelengths (in hundreds of nanometers).\n            L = pow(L,vec3(5)) * (exp(1.43876719683e5/(T*L)) - 1.);\n            return 1. - exp(-5e8/L); // Exposure level. Set to "50." For "70," change the "5" to a "7," etc.\n        } \n        vec3 hash33(vec3 p){ \n            \n            float n = sin(dot(p, vec3(7, 157, 113)));    \n            return fract(vec3(2097152, 262144, 32768)*n); \n        }\n        \n        float voronoi(vec3 p){\n\n            vec3 b, r, g = floor(p);\n            p = fract(p); // "p -= g;" works on some GPUs, but not all, for some annoying reason.\n            \n            float d = 1.;  \n            for(int j = -1; j <= 1; j++) {\n                for(int i = -1; i <= 1; i++) {\n                    \n                    b = vec3(i, j, -1);\n                    r = b - p + hash33(g+b);\n                    d = min(d, dot(r,r));\n                    \n                    b.z = 0.0;\n                    r = b - p + hash33(g+b);\n                    d = min(d, dot(r,r));\n                    \n                    b.z = 1.;\n                    r = b - p + hash33(g+b);\n                    d = min(d, dot(r,r));\n                        \n                }\n            }\n            \n            return d; // Range: [0, 1]\n        }\n        \n        float noiseLayers(in vec3 p) {\n        \n            vec3 t = vec3(0., 0., p.z + iTime*1.5);\n\n            const int iter = 5; // Just five layers is enough.\n            float tot = 0., sum = 0., amp = 1.; // Total, sum, amplitude.\n\n            for (int i = 0; i < iter; i++) {\n                tot += voronoi(p + t) * amp; // Add the layer to the total.\n                p *= 2.; // Position multiplied by two.\n                t *= 1.5; // Time multiplied by less than two.\n                sum += amp; // Sum of amplitudes.\n                amp *= .5; // Decrease successive layer amplitude, as normal.\n            }\n            \n            return tot/sum; // Range: [0, 1].\n        }\n        float distanceTo(vec2 src, vec2 dst) {\n\t\t\tfloat dx = src.x - dst.x;\n\t\t\tfloat dy = src.y - dst.y;\n\t\t\tfloat dv = dx * dx + dy * dy;\n\t\t\treturn sqrt(dv);\n\t\t}\n\n        \n\t\tvoid main() { \n            float len = distanceTo(vec2(0.5, 0.5), vec2(vUv.x, vUv.y)) * 2.0;  \n            vec2 uv = (vUv-0.5) * 2.0;\n            \n            uv += vec2(sin(iTime*.5)*.25, cos(iTime*.5)*.125);\n            \n            vec3 rd = normalize(vec3(uv.x, uv.y, 3.1415926535898/8.));\n        \n            float cs = cos(iTime*.25), si = sin(iTime*.25); \n            rd.xy = rd.xy*mat2(cs, -si, si, cs);  \n            float c = noiseLayers(rd*2.);\n            \n            c = max(c + dot(hash33(rd)*2. - 1., vec3(.015)), 0.);\n        \n            c *= sqrt(c)*1.5; // Contrast.\n            vec3 col = firePalette(c); // Palettization.\n            col = mix(col, col.zyx*.15 + c*.85, min(pow(dot(rd.xy, rd.xy)*1.2, 1.5), 1.)); // Color dispersion.\n            col = pow(col, vec3(1.25)); // Tweaking the contrast a little.\n    \n\t\t\tgl_FragColor = vec4(sqrt(clamp(col, 0., 1.)),  1.0 - pow(len, 2.0));\n\t\t\t\n\t\t}\n\t\t';return n},effect4:function(){var n="\n        uniform float ratio;\n\n        float PI2 = 6.28318530718;\n        float PI = 3.1416;\n\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n          \n\t\tvarying vec2 vUv;\n        float vorocloud(vec2 p){\n            float f = 0.0;\n            vec2 pp = cos(vec2(p.x * 14.0, (16.0 * p.y + cos(floor(p.x * 30.0)) + iTime * PI2)) );\n            p = cos(p * 12.1 + pp * 10.0 + 0.5 * cos(pp.x * 10.0));\n            \n            vec2 pts[4];\n            \n            pts[0] = vec2(0.5, 0.6);\n            pts[1] = vec2(-0.4, 0.4);\n            pts[2] = vec2(0.2, -0.7);\n            pts[3] = vec2(-0.3, -0.4);\n            \n            float d = 5.0;\n            \n            for(int i = 0; i < 4; i++){\n                  pts[i].x += 0.03 * cos(float(i)) + p.x;\n                  pts[i].y += 0.03 * sin(float(i)) + p.y;\n                d = min(d, distance(pts[i], pp));\n            }\n            \n            f = 2.0 * pow(1.0 - 0.3 * d, 13.0);\n            \n            f = min(f, 1.0);\n            \n            return f;\n        }\n        vec4 scene(vec2 UV){\n            float x = UV.x;\n            float y = UV.y;\n            \n            vec2 p = vec2(x, y) - vec2(0.5);\n            \n            vec4 col = vec4(0.0);\n            col.g += 0.02;\n            \n            float v = vorocloud(p);\n            v = 0.2 * floor(v * 5.0);\n            \n            col.r += 0.1 * v;\n            col.g += 0.6 * v;\n            col.b += 0.5 * pow(v, 5.0);\n            \n            \n            v = vorocloud(p * 2.0);\n            v = 0.2 * floor(v * 5.0);\n            \n            col.r += 0.1 * v;\n            col.g += 0.2 * v;\n            col.b += 0.01 * pow(v, 5.0);\n            \n            col.a = v == 0.0 ? 0.0 : 1.0;\n            \n            return col;\n        }\n         \n        float distanceTo(vec2 src, vec2 dst) {\n\t\t\tfloat dx = src.x - dst.x;\n\t\t\tfloat dy = src.y - dst.y;\n\t\t\tfloat dv = dx * dx + dy * dy;\n\t\t\treturn sqrt(dv);\n\t\t}\n\n        \n\t\tvoid main() { \n            float len = distanceTo(vec2(0.5, 0.5), vec2(vUv.x, vUv.y)) * 2.0; \n             \n\n\t\t\tgl_FragColor = scene(vUv);\n\t\t\t\n\t\t}\n\t\t";return n},effect5:function(){var n="\n        uniform float ratio;\n\n        float M_PI = 3.1415926;\n        float M_TWO_PI = 6.28318530718;\n        vec3 iMouse = vec3(0.0, 0.0 ,0.0 );\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n          \n\t\tvarying vec2 vUv;\n        float rand(vec2 n) {\n            return fract(sin(dot(n, vec2(12.9898,12.1414))) * 83758.5453);\n        }\n        \n        float noise(vec2 n) {\n            const vec2 d = vec2(0.0, 1.0);\n            vec2 b = floor(n);\n            vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n            return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n        }\n        \n        vec3 ramp(float t) {\n            return t <= .5 ? vec3( 1. - t * 1.4, .2, 1.05 ) / t : vec3( .3 * (1. - t) * 2., .2, 1.05 ) / t;\n        }\n        vec2 polarMap(vec2 uv, float shift, float inner) {\n        \n            uv = vec2(0.5) - uv;\n            \n            \n            float px = 1.0 - fract(atan(uv.y, uv.x) / 6.28 + 0.25) + shift;\n            float py = (sqrt(uv.x * uv.x + uv.y * uv.y) * (1.0 + inner * 2.0) - inner) * 2.0;\n            \n            return vec2(px, py);\n        }\n        float fire(vec2 n) {\n            return noise(n) + noise(n * 2.1) * .6 + noise(n * 5.4) * .42;\n        }\n        \n        float shade(vec2 uv, float t) {\n            uv.x += uv.y < .5 ? 23.0 + t * .035 : -11.0 + t * .03;    \n            uv.y = abs(uv.y - .5);\n            uv.x *= 35.0;\n            \n            float q = fire(uv - t * .013) / 2.0;\n            vec2 r = vec2(fire(uv + q / 2.0 + t - uv.x - uv.y), fire(uv + q - t));\n            \n            return pow((r.y + r.y) * max(.0, uv.y) + .1, 4.0);\n        }\n        \n        vec3 color(float grad) {\n            \n            float m2 = iMouse.z < 0.0001 ? 1.15 : iMouse.y * 3.0 / iResolution.y;\n            grad =sqrt( grad);\n            vec3 color = vec3(1.0 / (pow(vec3(0.5, 0.0, .1) + 2.61, vec3(2.0))));\n            vec3 color2 = color;\n            color = ramp(grad);\n            color /= (m2 + max(vec3(0), color));\n            \n            return color;\n        \n        }\n        \n         \n        float distanceTo(vec2 src, vec2 dst) {\n\t\t\tfloat dx = src.x - dst.x;\n\t\t\tfloat dy = src.y - dst.y;\n\t\t\tfloat dv = dx * dx + dy * dy;\n\t\t\treturn sqrt(dv);\n\t\t}\n\n        \n\t\tvoid main() { \n            float m1 = iMouse.z < 0.0001 ? 3.6 : iMouse.x * 5.0 / iResolution.x;\n    \n            float t = iTime;\n            vec2 uv = vUv;\n            float ff = 1.0 - uv.y;\n            uv.x -= (iResolution.x / iResolution.y - 1.0) / 2.0;\n            vec2 uv2 = uv;\n            uv2.y = 1.0 - uv2.y;\n            uv = polarMap(uv, 1.3, m1);\n            uv2 = polarMap(uv2, 1.9, m1);\n\n            vec3 c1 = color(shade(uv, t)) * ff;\n            vec3 c2 = color(shade(uv2, t)) * (1.0 - ff);\n             \n\n\t\t\tgl_FragColor = vec4(c1 + c2, 1.0);;\n\t\t\t\n\t\t}\n\t\t";return n},effect6:function(){var n="\n        uniform float ratio;\n\n        float PI = 3.1415926;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n        \n\t\tvoid main() { \n            vec2 p = (vUv - 0.5) * 2.0;\n            float tau = PI * 2.0;\n            float a = atan(p.x,p.y);\n            float r = length(p)*0.75;\n            vec2 uv = vec2(a/tau,r);\n            \n            //get the color\n            float xCol = (uv.x - (iTime / 3.0)) * 3.0;\n            xCol = mod(xCol, 3.0);\n            vec3 horColour = vec3(0.25, 0.25, 0.25);\n            \n            if (xCol < 1.0) {\n                \n                horColour.r += 1.0 - xCol;\n                horColour.g += xCol;\n            }\n            else if (xCol < 2.0) {\n                \n                xCol -= 1.0;\n                horColour.g += 1.0 - xCol;\n                horColour.b += xCol;\n            }\n            else {\n                \n                xCol -= 2.0;\n                horColour.b += 1.0 - xCol;\n                horColour.r += xCol;\n            }\n\n            // draw color beam\n            uv = (2.0 * uv) - 1.0;\n            float beamWidth = (0.7+0.5*cos(uv.x*10.0*tau*0.15*clamp(floor(5.0 + 10.0*cos(iTime)), 0.0, 10.0))) * abs(1.0 / (30.0 * uv.y));\n            vec3 horBeam = vec3(beamWidth); \n\t\t\tgl_FragColor = vec4((( horBeam) * horColour), 1.0);\n\t\t\t\n\t\t}\n\t\t";return n},effect7:function(){var n="\n        uniform float ratio;\n\n        float PI = 3.1415926;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n\t\tuniform vec3 color; \n        \n        vec2 rotate(vec2 p, float rad) {\n            mat2 m = mat2(cos(rad), sin(rad), -sin(rad), cos(rad));\n            return m * p;\n        }\n        \n        vec2 translate(vec2 p, vec2 diff) {\n            return p - diff;\n        }\n        \n        vec2 scale(vec2 p, float r) {\n            return p*r;\n        }\n        \n        float circle(float pre, vec2 p, float r1, float r2, float power) {\n            float leng = length(p);\n            float d = min(abs(leng-r1), abs(leng-r2));\n            if (r1<leng && leng<r2) pre /= exp(d)/r2;\n            float res = power / d;\n            return clamp(pre + res, 0.0, 1.0);\n        }\n        \n        float rectangle(float pre, vec2 p, vec2 half1, vec2 half2, float power) {\n            p = abs(p);\n            if ((half1.x<p.x || half1.y<p.y) && (p.x<half2.x && p.y<half2.y)) {\n                pre = max(0.01, pre);\n            }\n            float dx1 = (p.y < half1.y) ? abs(half1.x-p.x) : length(p-half1);\n            float dx2 = (p.y < half2.y) ? abs(half2.x-p.x) : length(p-half2);\n            float dy1 = (p.x < half1.x) ? abs(half1.y-p.y) : length(p-half1);\n            float dy2 = (p.x < half2.x) ? abs(half2.y-p.y) : length(p-half2);\n            float d = min(min(dx1, dx2), min(dy1, dy2));\n            float res = power / d;\n            return clamp(pre + res, 0.0, 1.0);\n        }\n        float radiation(float pre, vec2 p, float r1, float r2, int num, float power) {\n            float angle = 2.0*PI/float(num);\n            float d = 1e10;\n            for(int i=0; i<360; i++) {\n                if (i>=num) break;\n                float _d = (r1<p.y && p.y<r2) ? \n                    abs(p.x) : \n                    min(length(p-vec2(0.0, r1)), length(p-vec2(0.0, r2)));\n                d = min(d, _d);\n                p = rotate(p, angle);\n            }\n            float res = power / d;\n            return clamp(pre + res, 0.0, 1.0);\n        }\n        vec3 calc(vec2 p) {\n            float dst = 0.0;\n            p = scale(p, sin(PI*iTime/1.0)*0.02+1.1);\n            {\n                vec2 q = p;\n                q = rotate(q, iTime * PI / 6.0);\n                dst = circle(dst, q, 0.85, 0.9, 0.006);\n                dst = radiation(dst, q, 0.87, 0.88, 36, 0.0008);\n            }\n            {\n                vec2 q = p;\n                q = rotate(q, iTime * PI / 6.0);\n                const int n = 6;\n                float angle = PI / float(n);\n                q = rotate(q, floor(atan(q.x, q.y)/angle + 0.5) * angle);\n                for(int i=0; i<n; i++) {\n                    dst = rectangle(dst, q, vec2(0.85/sqrt(2.0)), vec2(0.85/sqrt(2.0)), 0.0015);\n                    q = rotate(q, angle);\n                }\n            }\n            {\n                vec2 q = p;\n                q = rotate(q, iTime * PI / 6.0);\n                const int n = 12;\n                q = rotate(q, 2.0*PI/float(n)/2.0);\n                float angle = 2.0*PI / float(n);\n                for(int i=0; i<n; i++) {\n                    dst = circle(dst, q-vec2(0.0, 0.875), 0.001, 0.05, 0.004);\n                    dst = circle(dst, q-vec2(0.0, 0.875), 0.001, 0.001, 0.008);\n                    q = rotate(q, angle);\n                }\n            }\n            {\n                vec2 q = p;\n                dst = circle(dst, q, 0.5, 0.55, 0.002);\n            }\n            {\n                vec2 q = p;\n                q = rotate(q, -iTime * PI / 6.0);\n                const int n = 3;\n                float angle = PI / float(n);\n                q = rotate(q, floor(atan(q.x, q.y)/angle + 0.5) * angle);\n                for(int i=0; i<n; i++) {\n                    dst = rectangle(dst, q, vec2(0.36, 0.36), vec2(0.36, 0.36), 0.0015);\n                    q = rotate(q, angle);\n                }\n            }\n            {\n                vec2 q = p;\n                q = rotate(q, -iTime * PI / 6.0);\n                const int n = 12;\n                q = rotate(q, 2.0*PI/float(n)/2.0);\n                float angle = 2.0*PI / float(n);\n                for(int i=0; i<n; i++) {\n                    dst = circle(dst, q-vec2(0.0, 0.53), 0.001, 0.035, 0.004);\n                    dst = circle(dst, q-vec2(0.0, 0.53), 0.001, 0.001, 0.001);\n                    q = rotate(q, angle);\n                }\n            }\n            {\n                vec2 q = p;\n                q = rotate(q, iTime * PI / 6.0);\n                dst = radiation(dst, q, 0.25, 0.3, 12, 0.005);\n            }\n            {\n                vec2 q = p;\n                q = scale(q, sin(PI*iTime/1.0)*0.04+1.1);\n                q = rotate(q, -iTime * PI / 6.0);\n                for(float i=0.0; i<6.0; i++) {\n                    float r = 0.13-i*0.01;\n                    q = translate(q, vec2(0.1, 0.0));\n                    dst = circle(dst, q, r, r, 0.002);\n                    q = translate(q, -vec2(0.1, 0.0));\n                    q = rotate(q, -iTime * PI / 12.0);\n                }\n                dst = circle(dst, q, 0.04, 0.04, 0.004);\n            }\n            return pow(dst, 2.5) * vec3(1.0, 0.95, 0.8);\n        }\n\t\tvoid main() { \n            vec2 uv = (vUv - 0.5) * 1.8;\n\t\t\tgl_FragColor = vec4(calc(uv) * color, pow(calc(uv).x, 5.0));\n\t\t}\n\t\t";return n},effect8:function(){var n="\n        #define SMOOTH(r,R) (1.0-smoothstep(R-1.0,R+1.0, r))\n        #define RANGE(a,b,x) ( step(a,x)*(1.0-step(b,x)) )\n        #define RS(a,b,x) ( smoothstep(a-1.0,a+1.0,x)*(1.0-smoothstep(b-1.0,b+1.0,x)) )\n        #define M_PI 3.1415926535897932384626433832795\n\n        #define blue1 vec3(0.74,0.95,1.00)\n        #define blue2 vec3(0.87,0.98,1.00)\n        #define blue3 vec3(0.35,0.76,0.83)\n        #define blue4 vec3(0.953,0.969,0.89)\n        #define red   vec3(1.00,0.38,0.227)\n\n        #define MOV(a,b,c,d,t) (vec2(a*cos(t)+b*cos(0.1*(t)), c*sin(t)+d*cos(0.1*(t))))\n\n        uniform float ratio;\n\n        float PI = 3.1415926;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n        \n        \n        float movingLine(vec2 uv, vec2 center, float radius)\n        {\n            //angle of the line\n            float theta0 = 90.0 * iTime * 2.0;\n            vec2 d = uv - center;\n            float r = sqrt( dot( d, d ) );\n            if(r<radius)\n            {\n                //compute the distance to the line theta=theta0\n                vec2 p = radius*vec2(cos(theta0*M_PI/180.0),\n                                    -sin(theta0*M_PI/180.0));\n                float l = length( d - p*clamp( dot(d,p)/dot(p,p), 0.0, 1.0) );\n                d = normalize(d);\n                //compute gradient based on angle difference to theta0\n                float theta = mod(180.0*atan(d.y,d.x)/M_PI+theta0,360.0);\n                float gradient = clamp(1.0-theta/90.0,0.0,1.0);\n                return SMOOTH(l,1.0)+0.5*gradient;\n            }\n            else return 0.0;\n        }\n\n        float circle(vec2 uv, vec2 center, float radius, float width)\n        {\n            float r = length(uv - center);\n            return SMOOTH(r-width/2.0,radius)-SMOOTH(r+width/2.0,radius);\n        }\n\n        float circle2(vec2 uv, vec2 center, float radius, float width, float opening)\n        {\n            vec2 d = uv - center;\n            float r = sqrt( dot( d, d ) );\n            d = normalize(d);\n            if( abs(d.y) > opening )\n                return SMOOTH(r-width/2.0,radius)-SMOOTH(r+width/2.0,radius);\n            else\n                return 0.0;\n        }\n        float circle3(vec2 uv, vec2 center, float radius, float width)\n        {\n            vec2 d = uv - center;\n            float r = sqrt( dot( d, d ) );\n            d = normalize(d);\n            float theta = 180.0*(atan(d.y,d.x)/M_PI);\n            return smoothstep(2.0, 2.1, abs(mod(theta+2.0,45.0)-2.0)) *\n                mix( 0.5, 1.0, step(45.0, abs(mod(theta, 180.0)-90.0)) ) *\n                (SMOOTH(r-width/2.0,radius)-SMOOTH(r+width/2.0,radius));\n        }\n\n        float triangles(vec2 uv, vec2 center, float radius)\n        {\n            vec2 d = uv - center;\n            return RS(-8.0, 0.0, d.x-radius) * (1.0-smoothstep( 7.0+d.x-radius,9.0+d.x-radius, abs(d.y)))\n                + RS( 0.0, 8.0, d.x+radius) * (1.0-smoothstep( 7.0-d.x-radius,9.0-d.x-radius, abs(d.y)))\n                + RS(-8.0, 0.0, d.y-radius) * (1.0-smoothstep( 7.0+d.y-radius,9.0+d.y-radius, abs(d.x)))\n                + RS( 0.0, 8.0, d.y+radius) * (1.0-smoothstep( 7.0-d.y-radius,9.0-d.y-radius, abs(d.x)));\n        }\n\n        float _cross(vec2 uv, vec2 center, float radius)\n        {\n            vec2 d = uv - center;\n            int x = int(d.x);\n            int y = int(d.y);\n            float r = sqrt( dot( d, d ) );\n            if( (r<radius) && ( (x==y) || (x==-y) ) )\n                return 1.0;\n            else return 0.0;\n        }\n        float dots(vec2 uv, vec2 center, float radius)\n        {\n            vec2 d = uv - center;\n            float r = sqrt( dot( d, d ) );\n            if( r <= 2.5 )\n                return 1.0;\n            if( ( r<= radius) && ( (abs(d.y+0.5)<=1.0) && ( mod(d.x+1.0, 50.0) < 2.0 ) ) )\n                return 1.0;\n            else if ( (abs(d.y+0.5)<=1.0) && ( r >= 50.0 ) && ( r < 115.0 ) )\n                return 0.5;\n            else\n                return 0.0;\n        }\n        float bip1(vec2 uv, vec2 center)\n        {\n            return SMOOTH(length(uv - center),3.0);\n        }\n        float bip2(vec2 uv, vec2 center)\n        {\n            float r = length(uv - center);\n            float R = 8.0+mod(87.0*iTime, 80.0);\n            return (0.5-0.5*cos(30.0*iTime)) * SMOOTH(r,5.0)\n                + SMOOTH(6.0,r)-SMOOTH(8.0,r)\n                + smoothstep(max(8.0,R-20.0),R,r)-SMOOTH(R,r);\n        }\n\t\tvoid main() { \n            vec2 _uv = vec2(vUv.x * iResolution.x, vUv.y * iResolution.y);\n            vec3 finalColor;\n            vec2 uv = _uv;\n            //center of the image\n            vec2 c = vec2(iResolution.x / 2.0, iResolution.y / 2.0);\n            finalColor = vec3( 0.3*_cross(uv, c, 240.0) );\n            finalColor += ( circle(uv, c, 100.0, 1.0)\n                        + circle(uv, c, 165.0, 1.0) );\n            finalColor += (circle(uv, c, 240.0, 2.0) );//+ dots(uv,c,240.0)) * blue4;\n            finalColor += circle3(uv, c, 313.0, 4.0);\n            finalColor += triangles(uv, c, 315.0 + 30.0*sin(iTime)) * blue2;\n            finalColor += movingLine(uv, c, 240.0) * blue3;\n            finalColor += circle(uv, c, 10.0, 1.0) * blue3;\n            finalColor += 0.7 * circle2(uv, c, 262.0, 1.0, 0.5+0.2*cos(iTime)) * blue3;\n            if( length(uv-c) < 240.0 )\n            {\n                //animate some bips with random movements\n                vec2 p = 130.0*MOV(1.3,1.0,1.0,1.4,3.0+0.1*iTime);\n                finalColor += bip1(uv, c+p) * vec3(1,1,1);\n                p = 130.0*MOV(0.9,-1.1,1.7,0.8,-2.0+sin(0.1*iTime)+0.15*iTime);\n                finalColor += bip1(uv, c+p) * vec3(1,1,1);\n                p = 50.0*MOV(1.54,1.7,1.37,1.8,sin(0.1*iTime+7.0)+0.2*iTime);\n                finalColor += bip2(uv,c+p) * red;\n            }\n            vec3 color = mix(finalColor, vec3(1.0,1.0,1.0), 0.1);\n\t\t\tgl_FragColor = vec4( color, finalColor.y+finalColor.x+finalColor.z );\n\t\t\t\n\t\t}\n\t\t";return n},effect8_1:function(){var n="\n        varying vec2 vUv;\n        uniform float iTime;\n        void main() {\n            vec3 color = vec3(0.0, 1.0, 1.0);\n            float d = length(vUv - vec2(0.5,0.5));\n            float time = sin(clamp(fract(iTime), 0.3, 1.0 ));\n            // color = smoothstep(0.495, 0.5, vUv.y)*vec3(1.0, 1.0, 0.0);\n            // color += smoothstep(0.495, 0.5, vUv.x)*vec3(1.0, 0.0, 1.0);\n            // color = smoothstep(d+0.01, d, vUv.y)*color;\n            float f = (1.0 - pow(smoothstep(0.3, 0.4, d), 200.0))*0.2;\n            color += pow(smoothstep(0.25, 0.30, d) - smoothstep(0.30, 0.33, d), 100.0);\n\n            gl_FragColor = vec4(color, f+color.r);\n        }\n        ";return n},effect9:function(){var n="\n        uniform float ratio;\n\n        float PI = 3.1415926;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n        \n        const float cloudscale = 1.1;\n        const float speed = 0.03;\n        const float clouddark = 0.5;\n        const float cloudlight = 0.3;\n        const float cloudcover = 0.2;\n        const float cloudalpha = 8.0;\n        const float skytint = 0.5;\n        const vec3 skycolour1 = vec3(0.2, 0.4, 0.6);\n        const vec3 skycolour2 = vec3(0.4, 0.7, 1.0);\n\n        const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\n        vec2 hash( vec2 p ) {\n            p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n            return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n        }\n        float noise( in vec2 p ) {\n            const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n            const float K2 = 0.211324865; // (3-sqrt(3))/6;\n            vec2 i = floor(p + (p.x+p.y)*K1);\t\n            vec2 a = p - i + (i.x+i.y)*K2;\n            vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n            vec2 b = a - o + K2;\n            vec2 c = a - 1.0 + 2.0*K2;\n            vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n            vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n            return dot(n, vec3(70.0));\t\n        }\n        \n        float fbm(vec2 n) {\n            float total = 0.0, amplitude = 0.1;\n            for (int i = 0; i < 7; i++) {\n                total += noise(n) * amplitude;\n                n = m * n;\n                amplitude *= 0.4;\n            }\n            return total;\n        }\n        \n\t\tvoid main() { \n            vec2 p = (vUv - 0.5) * 2.0;\n            vec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);    \n            float time = iTime * speed;\n            float q = fbm(uv * cloudscale * 0.5);\n            \n            //ridged noise shape\n            float r = 0.0;\n            uv *= cloudscale;\n            uv -= q - time;\n            float weight = 0.8;\n            for (int i=0; i<8; i++){\n                r += abs(weight*noise( uv ));\n                uv = m*uv + time;\n                weight *= 0.7;\n            }\n            \n            //noise shape\n            float f = 0.0;\n            uv = p*vec2(iResolution.x/iResolution.y,1.0);\n            uv *= cloudscale;\n            uv -= q - time;\n            weight = 0.7;\n            for (int i=0; i<8; i++){\n                f += weight*noise( uv );\n                uv = m*uv + time;\n                weight *= 0.6;\n            }\n            \n            f *= r + f;\n            \n            //noise colour\n            float c = 0.0;\n            time = iTime * speed * 2.0;\n            uv = p*vec2(iResolution.x/iResolution.y,1.0);\n            uv *= cloudscale*2.0;\n            uv -= q - time;\n            weight = 0.4;\n            for (int i=0; i<7; i++){\n                c += weight*noise( uv );\n                uv = m*uv + time;\n                weight *= 0.6;\n            }\n            \n            //noise ridge colour\n            float c1 = 0.0;\n            time = iTime * speed * 3.0;\n            uv = p*vec2(iResolution.x/iResolution.y,1.0);\n            uv *= cloudscale*3.0;\n            uv -= q - time;\n            weight = 0.4;\n            for (int i=0; i<7; i++){\n                c1 += abs(weight*noise( uv ));\n                uv = m*uv + time;\n                weight *= 0.6;\n            }\n            \n            c += c1;\n            \n            vec3 skycolour = mix(skycolour2, skycolour1, p.y);\n            vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((clouddark + cloudlight*c), 0.0, 1.0);\n        \n            f = cloudcover + cloudalpha*f*r;\n            \n            vec3 result = mix(skycolour, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));\n\n\t\t\tgl_FragColor = vec4( result, 1.0 );\n\t\t\t\n\t\t}\n\t\t";return n},effect10:function(){var n='\n        uniform float ratio;\n\n        float PI = 3.1415926;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n        \n        \n        struct Gear\n        {\n            float t;\t\t\t// Time\n            float gearR;\t\t// Gear radius\n            float teethH;\t\t// Teeth height\n            float teethR;\t\t// Teeth "roundness"\n            float teethCount;\t// Teeth count\n            float diskR;\t\t// Inner or outer border radius\n            vec3 color;\t\t\t// Color\n        };\n        float GearFunction(vec2 uv, Gear g)\n        {\n            float r = length(uv);\n            float a = atan(uv.y, uv.x);\n            \n            // Gear polar function:\n            //  A sine squashed by a logistic function gives a convincing\n            //  gear shape!\n            float p = g.gearR-0.5*g.teethH + \n                    g.teethH/(1.0+exp(g.teethR*sin(g.t + g.teethCount*a)));\n\n            float gear = r - p;\n            float disk = r - g.diskR;\n            \n            return g.gearR > g.diskR ? max(-disk, gear) : max(disk, -gear);\n        }\n\n\n        float GearDe(vec2 uv, Gear g)\n        {\n            // IQ\'s f/|Grad(f)| distance estimator:\n            float f = GearFunction(uv, g);\n            vec2 eps = vec2(0.0001, 0);\n            vec2 grad = vec2(\n                GearFunction(uv + eps.xy, g) - GearFunction(uv - eps.xy, g),\n                GearFunction(uv + eps.yx, g) - GearFunction(uv - eps.yx, g)) / (2.0*eps.x);\n            \n            return (f)/length(grad);\n        }\n\n\n\n        float GearShadow(vec2 uv, Gear g)\n        {\n            float r = length(uv+vec2(0.1));\n            float de = r - g.diskR + 0.0*(g.diskR - g.gearR);\n            float eps = 0.4*g.diskR;\n            return smoothstep(eps, 0., abs(de));\n        }\n\n\n        void DrawGear(inout vec3 color, vec2 uv, Gear g, float eps)\n        {\n            float d = smoothstep(eps, -eps, GearDe(uv, g));\n            float s = 1.0 - 0.7*GearShadow(uv, g);\n            color = mix(s*color, g.color, d);\n        }\n\n\n        \n\t\tvoid main() { \n            float t = 0.5*iTime;\n            vec2 uv = (vUv - 0.5) * 2.0;\n            float eps = 2.0/iResolution.y;\n\n            // Scene parameters;\n            vec3 base = vec3(0.95, 0.7, 0.2);\n            const float count = 8.0;\n\n            Gear outer = Gear(0.0, 0.8, 0.08, 4.0, 32.0, 0.9, base);\n            Gear inner = Gear(0.0, 0.4, 0.08, 4.0, 16.0, 0.3, base);\n            \n            \n            // Draw inner gears back to front:\n            vec3 color = vec3(0.0);\n            for(float i=0.0; i<count; i++)\n            {\n                t += 2.0*PI/count;\n                inner.t = 16.0*t;\n                inner.color = base*(0.35 + 0.6*i/(count-1.0));\n                DrawGear(color, uv+0.4*vec2(cos(t),sin(t)), inner, eps);\n            }\n            \n            // Draw outer gear:\n            DrawGear(color, uv, outer, eps);\n\n\t\t\tgl_FragColor = vec4(color,1.0);\n\t\t\t\n\t\t}\n\t\t';return n},effect11:function(){var n="\n        #define TAU 6.28318530718\n        #define MAX_ITER 5\n\n        precision highp float;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n\n        void main(void) {\n            float time = iTime * .5+23.0;\n            // uv should be the 0-1 uv of texture...\n            vec2 uv = vUv;\n            \n        #ifdef SHOW_TILING\n            vec2 p = mod(uv*TAU*2.0, TAU)-250.0;\n        #else\n            vec2 p = mod(uv*TAU, TAU)-250.0;\n        #endif\n            vec2 i = vec2(p);\n            float c = 1.0;\n            float inten = .005;\n\n            for (int n = 0; n < MAX_ITER; n++) \n            {\n                float t = time * (1.0 - (3.5 / float(n+1)));\n                i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n                c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n            }\n            c /= float(MAX_ITER);\n            c = 1.17-pow(c, 1.4);\n            vec3 colour = vec3(pow(abs(c), 8.0));\n            colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\n            \n\n            #ifdef SHOW_TILING\n            // Flash tile borders...\n            vec2 pixel = 2.0 / iResolution.xy;\n            uv *= 2.0;\n\n            float f = floor(mod(iTime*.5, 2.0)); \t// Flash value.\n            vec2 first = step(pixel, uv) * f;\t\t   \t// Rule out first screen pixels and flash.\n            uv  = step(fract(uv), pixel);\t\t\t\t// Add one line of pixels per tile.\n            colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\n            \n            #endif\n            gl_FragColor = vec4(colour, 1.0);\n        }\n\t\t";return n},effect12:function(){var n="\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n\n        float snoise(vec3 uv, float res)\n        {\n            const vec3 s = vec3(1e0, 1e2, 1e3);\n            \n            uv *= res;\n            \n            vec3 uv0 = floor(mod(uv, res))*s;\n            vec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n            \n            vec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\n            vec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n                        uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\n            vec4 r = fract(sin(v*1e-1)*1e3);\n            float r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n            \n            r = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n            float r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n            \n            return mix(r0, r1, f.z)*2.-1.;\n        }\n\n        void main(void) {\n            \n            vec2 p = (vUv - 0.5) * 2.0;\n            p.x *= iResolution.x/iResolution.y;\n            \n            float color = 3.0 - (3.*length(2.*p));\n            \n            vec3 coord = vec3(atan(p.x,p.y)/6.2832+.5, length(p)*.4, .5);\n            \n            for(int i = 1; i <= 7; i++)\n            {\n                float power = pow(2.0, float(i));\n                color += (1.5 / power) * snoise(coord + vec3(0.,-iTime*.05, iTime*.01), power*16.);\n            }\n            gl_FragColor = vec4( color, pow(max(color,0.),2.)*0.4, pow(max(color,0.),3.)*0.15 , color);\n\n            // gl_FragColor = vec4(colour, 1.0);\n        }\n\t\t";return n},effect13:function(){var n="\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n\n         \n\n        void main(void) {\n            \n            vec2 uv = (vUv - 0.5) * 2.0;\n            float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n            float si = sin(t);\n            float co = cos(t);\n            mat2 ma = mat2(co, si, -si, co);\n\n            float v1, v2, v3;\n            v1 = v2 = v3 = 0.0;\n            \n            float s = 0.0;\n            for (int i = 0; i < 90; i++)\n            {\n                vec3 p = s * vec3(uv, 0.0);\n                p.xy *= ma;\n                p += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\n                for (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n                v1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n                v2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n                v3 += length(p.xy*10.) * .0003;\n                s  += .035;\n            }\n            \n            float len = length(uv);\n            v1 *= smoothstep(.7, .0, len);\n            v2 *= smoothstep(.5, .0, len);\n            v3 *= smoothstep(.9, .0, len);\n            \n            vec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n                            (v1 + v3) * .3,\n                            v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\n                            gl_FragColor=vec4(min(pow(abs(col), vec3(1.2)), 1.0), 1.0);\n            // gl_FragColor = vec4(colour, 1.0);\n        }\n\t\t";return n},effect14:function(){var n="\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n\n        float plasma(vec2 p, float iso, float fade)\n        {\n            float c = 0.0;\n            for (float i=1.0; i<10.0; ++i) {\n                float f1 = i / 0.6;\n                float f2 = i / 0.3;\n                float f3 = i / 0.7;\n                float f4 = i / 0.5;\n                float s1 = i / 2.0;\n                float s2 = i / 4.0;\n                float s3 = i / 3.0;\n                c += sin(p.x * f1 + iTime) * s1 + sin(p.y * f2 + 0.5 * iTime) * s2 + sin(p.x * f3 + p.y * f4 - 1.5 * iTime) * s3;\n            }\n            //c = mod(clamp(c, -1.0, 1.0), 0.5) * 2.0;\n            c = mod(c, 16.0) * 0.5 - 7.0;\n            if (c < iso) {\n                return 0.0;\n            }\n            else {\n                if (c > 0.5) c = 1.0 - c;\n                c *= 2.0;\n                return c * fade;\n            }\n        }\n\n\n        void main(void) {\n            \n            vec2 pos = (vUv - 0.5) * 2.0;\n            float c = 0.0;\n            for (float i=0.0; i<27.0; ++i)\n            {\n                float patazoom = mod(0.5 * iTime, 1.0);\n                float zoom = 1.0 + i - patazoom;\n                vec2 trans = vec2(sin(iTime * 0.3) * 0.5, sin(iTime * 0.4) * 0.2);\n                c = plasma(pos * zoom + trans, 0.0, 2.0 / (1.0 + i - patazoom));\n                if (c> 0.001) break;\n            }\n            gl_FragColor = vec4(c * pos.x, c * pos.y, c * abs(pos.x + pos.y), 0.5) * 2.0;\n            // gl_FragColor = vec4(colour, 1.0);\n        }\n\t\t";return n},effect15:function(){var n="\n        precision highp float;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n\n        float random (in vec2 p) { \n            vec3 p3  = fract(vec3(p.xyx) * .1031);\n            p3 += dot(p3, p3.yzx + 33.33);\n            return fract((p3.x + p3.y) * p3.z);\n        }\n        \n        float noise (in vec2 _st) {\n            vec2 i = floor(_st);\n            vec2 f = fract(_st);\n        \n            // Four corners in 2D of a tile\n            float a = random(i);\n            float b = random(i + vec2(1.0, 0.0));\n            float c = random(i + vec2(0.0, 1.0));\n            float d = random(i + vec2(1.0, 1.0));\n        \n            vec2 u = f * f * (3. - 2.0 * f);\n        \n            return mix(a, b, u.x) + \n                    (c - a)* u.y * (1. - u.x) + \n                    (d - b) * u.x * u.y;\n        }\n        \n        float light(in vec2 pos,in float size,in float radius,in float inner_fade,in float outer_fade){\n            float len = length(pos/size);\n            return pow(clamp((1.0 - pow( clamp(len-radius,0.0,1.0) , 1.0/inner_fade)),0.0,1.0),1.0/outer_fade);\n        }\n        \n        \n        float flare(in float angle,in float alpha,in float time){\n            float t = time;\n            float n = noise(vec2(t+0.5+abs(angle)+pow(alpha,0.6),t-abs(angle)+pow(alpha+0.1,0.6))*7.0);\n           //\tn = 1.0;\n            float split = (15.0+sin(t*2.0+n*4.0+angle*20.0+alpha*1.0*n)*(.3+.5+alpha*.6*n));\n           \n            float rotate = sin(angle*20.0 + sin(angle*15.0+alpha*4.0+t*30.0+n*5.0+alpha*4.0))*(.5 + alpha*1.5);\n           \n            float g = pow((2.0+sin(split+n*1.5*alpha+rotate)*1.4)*n*4.0,n*(1.5-0.8*alpha));\n            \n            g *= alpha * alpha * alpha * .5;\n            g += alpha*.7 + g * g * g;\n            return g;\n        }\n        \n        #define SIZE 2.8\n        #define RADIUS 0.07\n        #define INNER_FADE .8\n        #define OUTER_FADE 0.02\n        #define SPEED .1\n        #define BORDER 0.21\n\n\n        void main(void) {\n            \n            vec2 uv = (vUv - 0.5) * 2.0;\n            float f = .0;\n            float f2 = .0;\n            float t = iTime * SPEED;\n            float alpha = light(uv,SIZE,RADIUS,INNER_FADE,OUTER_FADE);\n            float angle = atan(uv.x,uv.y);\n            float n = noise(vec2(uv.x*20.+iTime,uv.y*20.+iTime));\n        \n            float l = length(uv);\n            if(l < BORDER){\n                t *= .8;\n                alpha = (1. - pow(((BORDER - l)/BORDER),0.22)*0.7);\n                alpha = clamp(alpha-light(uv,0.2,0.0,1.3,.7)*.55,.0,1.);\n                f = flare(angle*1.0,alpha,-t*.5+alpha);\n                f2 = flare(angle*1.0,alpha*1.2,((-t+alpha*.5+0.38134)));\n\n            }else if(alpha < 0.001){\n                f = alpha;\n            }else{\n                f = flare(angle,alpha,t)*1.3;\n            }\n            gl_FragColor = vec4(vec3(f*(1.0+sin(angle-t*4.)*.3)+f2*f2*f2,f*alpha+f2*f2*2.0,f*alpha*0.5+f2*(1.0+sin(angle+t*4.)*.3)),1.0);\n            // gl_FragColor = vec4(colour, 1.0);\n        }\n\t\t";return n},effect16:function(){var n='\n        precision highp float;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n\n        \nvec3 rY(vec3 p, float a) {\n    vec3 q = p;\n    float c = cos(a);\n    float s = sin(a);\n    q.x = c * p.x + s * p.z;\n    q.z = -s * p.x + c * p.z;\n    \n    return q;\n}\n\n// returns a pair of values for the distances along the ray at which there are sphere intersections, or 0 if none\nvec2 sphereIntersectionDistances(vec3 rayOrigin, vec3 rayDirection, vec3 sphereOrigin, float sphereRadius) {\n    vec3 toCenter = sphereOrigin - rayOrigin;\n    float toCenterAlongRay = dot(toCenter, rayDirection);\n    \n    float perpendicularDistanceSquared = dot(toCenter, toCenter) - toCenterAlongRay * toCenterAlongRay;\n    float radiusSquared = sphereRadius * sphereRadius;\n    \n    if (perpendicularDistanceSquared > radiusSquared) { // ray doesn’t touch the sphere\n        return vec2(0.);\n    }\n    \n    float insideSphereAlongRay = sqrt(radiusSquared - perpendicularDistanceSquared); // half the length of the portion of the ray inside the sphere\n    \n    float intersection1 = toCenterAlongRay - insideSphereAlongRay;\n    float intersection2 = toCenterAlongRay + insideSphereAlongRay;\n    if (intersection1 > intersection2) {\n        float t = intersection1;\n        intersection1 = intersection2;\n        intersection2 = t;\n    }\n    \n    if (intersection1 < 0.) { // first intersection is before the start of the ray\n        if (intersection2 < 0.) { // ditto second, though that… shouldn’t happen?\n            return vec2(0.);\n        } else {\n            intersection1 = intersection2;\n            intersection2 = 0.;\n        }\n    }\n    \n    return vec2(intersection1, intersection2);\n}\n\n// -----------------\n\n// 3d noise by iq, from https://www.shadertoy.com/view/Xsl3Dl\n\n// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nvec3 hash( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n\n// hash functions by David Hoskins, from https://www.shadertoy.com/view/4djSRW\n\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx + 33.33);\n   return fract((p3.xxy + p3.yzz) * p3.zyx); \n}\n\n\n// -----------------\n\nfloat octavedNoise(vec3 position) {\n    vec3 samplePosition = position * 2.;\n    float noiseAmount = noise(samplePosition + iTime * vec3(0.0,0.2,0.0));\n    samplePosition *= 1.99;\n    noiseAmount += noise(samplePosition + iTime * vec3(0.05,-0.37,0.02)) * 0.51;\n    noiseAmount /= 1.51;\n    return noiseAmount;\n}\n\nfloat density(vec3 position) {\n    float baseValue = 1.0 - pow(max(0.0, length(position)), 2.0);\n    float noiseAmount = octavedNoise(position);\n    \n    return max(0.,min(1.,baseValue - max(0.,noiseAmount * 1.5)));\n}\n\nvec4 innerLightPositionAndIntensity() {\n    float scaledTime = iTime * 6.1;\n    float hashInput = floor(scaledTime) * 0.1;\n    \n    if (hash11(hashInput) < 0.8) return vec4(0.); // mask out most of the flashes\n        \n    vec3 hash = hash31(hashInput);\n    float theta = hash.x * 6.283;\n    float z = hash.y * 2. - 1.;\n    float sinPhi = sin(acos(z));\n    vec3 position = vec3(sinPhi * cos(theta), sinPhi * sin(theta), z) * (0.6 + hash.z * 0.2);\n    \n    float intensity = sin(fract(scaledTime) * 3.142);\n    \n    return vec4(position, intensity);\n}\n\n\n// marching logic adapted from Ryan Brucks\'s article here: https://shaderbits.com/blog/creating-a-volumetric-ray-tracer\n\nvec4 march(vec3 origin, vec3 direction) {\n    \n    const int mainSteps = 30;\n    const int shadowSteps = 10;\n    const vec3 toLight = normalize(vec3(1.0,1.0,0.));\n    const float mainDensityScale = 4.;\n    \n    const float shadowingThreshold = 0.001;\n    const float shadowDensityScale = 3.;\n    \n    vec3 light = vec3(0.);\n    float transmittance = 1.;\n    \n    vec3 samplePosition = origin;\n   \n    const float mainStepLength = 2. / float(mainSteps); // why does lowering this below 2 change the appearance?\n    const float shadowStepLength = 1. / float(shadowSteps);\n    \n    const vec3 scaledShadowDensity = shadowDensityScale * shadowStepLength / vec3(0.8,0.7,1.0);\n    \n    const float shadowConstant = -log(shadowingThreshold) / scaledShadowDensity.z;\n    \n    const vec3 mainLightColor = vec3(0.6,0.8,1.);\n    const vec3 innerLightColor = vec3(0.7,0.4,1.) * 4.;\n    \n    vec3 mainStepAmount = direction * mainStepLength;\n    \n    vec3 shadowStepAmount = toLight * shadowStepLength;\n    \n    vec4 innerLight = innerLightPositionAndIntensity();\n    \n    for(int i = 0; i < mainSteps; i++) {\n        float localDensity = min(1.0, density(samplePosition) * mainDensityScale);\n        if (localDensity > 0.001) {\n            \n            // - main light (directional)\n            \n            vec3 shadowSamplePosition = samplePosition;\n            float shadowAccumulation = 0.;\n            for(int j = 0; j < shadowSteps; j++) {\n                shadowSamplePosition += shadowStepAmount;\n                \n                shadowAccumulation += min(1.0, density(shadowSamplePosition) * shadowDensityScale);\n                if (shadowAccumulation > shadowConstant || dot(shadowSamplePosition, shadowSamplePosition) > 1.) break;\n            }\n            \n            vec3 shadowTerm = exp(-shadowAccumulation * scaledShadowDensity);\n            float stepDensity = min(1.,localDensity * mainStepLength);\n            vec3 absorbedLight = shadowTerm * stepDensity;\n            \n            // accumulate directional light\n            light += absorbedLight * transmittance * mainLightColor;\n            \n            \n            // - inner light (point)\n            \n            shadowSamplePosition = samplePosition;\n            shadowAccumulation = 0.;\n            vec3 toInnerLight = innerLight.xyz - samplePosition;\n            vec3 innerLightShadowStepAmount = normalize(toInnerLight) * shadowStepLength;\n            \n            for(int j = 0; j < shadowSteps; j++) {\n                shadowSamplePosition += innerLightShadowStepAmount;\n                \n                shadowAccumulation += min(1.0, density(shadowSamplePosition) * shadowDensityScale);\n                \n                // bail out if we’ve accumulated enough or if we’ve gone outside the bounding sphere (squared length of the sample position > 1)\n                if (shadowAccumulation > shadowConstant || dot(shadowSamplePosition, shadowSamplePosition) > 1.) break;\n            }\n            \n            shadowTerm = exp(-shadowAccumulation * scaledShadowDensity);\n            stepDensity = min(1.,localDensity * mainStepLength);\n            absorbedLight = shadowTerm * stepDensity;\n            \n            // inverse-squared fade of the inner point light\n            float attenuation = min(1.0, 1.0 / (dot(toInnerLight, toInnerLight) * 2. + 0.0001)) * innerLight.w;\n            \n            // accumulate point light\n            light += absorbedLight * (transmittance * attenuation) * innerLightColor;\n            \n            // -\n            \n            transmittance *= (1. - stepDensity);\n\n            if (transmittance < 0.01) {\n                break;\n            }\n        }\n        \n        samplePosition += mainStepAmount;\n    }\n    \n    return vec4(vec3(light), transmittance);\n}\n\n\n\n        void main(void) {\n            \n            vec2 uv = (vUv - 0.5) * 2.0;\n            uv.x *= iResolution.x / iResolution.y;\n    const vec3 cameraLookAt = vec3(0.0, 0.0, 0.0);\n    vec3 cameraPosition = rY(vec3(0.0, 0.1, 1.0) * 2.5, iTime * 0.2);\n    vec3 cameraForward = normalize(cameraLookAt - cameraPosition);\n    vec3 cameraRight = cross(cameraForward, vec3(0.0, 1.0, 0.0));\n    vec3 cameraUp = cross(cameraRight, cameraForward);\n    \n\tvec3 rayDirection = normalize(uv.x * cameraRight + uv.y * cameraUp + 2.0 * cameraForward);\n    \n    // closest and farthest intersections, if any, with the bounding sphere\n    vec2 rayDistances = sphereIntersectionDistances(cameraPosition, rayDirection, vec3(0.), 1.);\n    \n    vec3 backgroundColor = vec3(0.1) - length(uv) * 0.04; // vignette\n    \n    if (rayDistances.x != 0. && rayDistances.y != 0.) {\n        vec3 farIntersection = cameraPosition + rayDirection * rayDistances.y;\n        \n        vec4 value = march(farIntersection, -rayDirection);\n        gl_FragColor = vec4(mix(value.rgb, backgroundColor, value.w), 1.0);\n        \n        // containing ball\n        /*\n        vec3 nearIntersection = cameraPosition + rayDirection * rayDistances.x;\n        gl_FragColor += pow(1.0 - abs(dot(rayDirection, nearIntersection)), 8.) * 0.3;\n\t\t*/\n    } else {\n        gl_FragColor = vec4(backgroundColor, 1.0);\n    } \n        }\n\t\t';return n},effect17:function(){var n="\n        precision highp float;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n\n        // Rand value between 0 and 1\n        float rand(vec2 p) {\n            return fract(sin(dot(p, vec2(12.543,514.123)))*4732.12);\n        }\n\n        // Value noise\n        float noise(vec2 p) {\n            vec2 f = smoothstep(0.0, 1.0, fract(p));\n            vec2 i = floor(p);\n            float a = rand(i);\n            float b = rand(i+vec2(1.0,0.0));\n            float c = rand(i+vec2(0.0,1.0));\n            float d = rand(i+vec2(1.0,1.0));\n            return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n            \n        }\n\n        // Fractal noise\n        float fbm(vec2 p) {\n            float a = 0.5;\n            float r = 0.0;\n            for (int i = 0; i < 8; i++) {\n                r += a*noise(p);\n                a *= 0.5;\n                p *= 2.0;\n            }\n            return r;\n        }\n\n        // Lasers originating from a central point\n        float laser(vec2 p, int num) {\n            float r = atan(p.x, p.y);\n            float sn = sin(r*float(num)+iTime);\n            float lzr = 0.5+0.5*sn;\n            lzr = lzr*lzr*lzr*lzr*lzr;\n            float glow = pow(clamp(sn, 0.0, 1.0),100.0);\n            return lzr+glow;\n        }\n\n        // Mix of fractal noises to simulate fog\n        float clouds(vec2 uv) {\n            vec2 t = vec2(0,iTime);\n            float c1 = fbm(fbm(uv*3.0)*0.75+uv*3.0+t/3.0);\n            float c2 = fbm(fbm(uv*2.0)*0.5+uv*7.0+t/3.0);\n            float c3 = fbm(fbm(uv*10.0-t)*0.75+uv*5.0+t/6.0);\n            float r = mix(c1, c2, c3*c3);\n            return r*r;\n        }\n\n\n\n        void main(void) {\n            \n            vec2 uv = (vUv - 0.4) * 2.0;\n            vec2 hs = iResolution.xy/iResolution.y*0.5;\n            vec2 uvc = uv-hs;\n            float l = (1.0 + 3.0*noise(vec2(15.0-iTime)))\n                * laser(vec2(uv.x+0.5, uv.y*(0.5 + 10.0*noise(vec2(iTime/5.0))) + 0.1), 15);\n            l += fbm(vec2(2.0*iTime))\n                * laser(vec2(hs.x-uvc.x-0.2, uv.y+0.1), 25);\n            l += noise(vec2(iTime-73.0))\n                * laser(vec2(uvc.x, 1.0-uv.y+0.5), 30);\n            float c = clouds(uv);\n            vec4 col = vec4(0, 1, 0, 1)*(uv.y*l+uv.y*uv.y)*c;\n            gl_FragColor = pow(col, vec4(0.75));\n        }\n\t\t";return n},effect18:function(){var n="\n        precision highp float;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n\n        const mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\n        float noise( in vec2 p )\n        {\n            return sin(p.x)*sin(p.y);\n        }\n\n        float fbm4( vec2 p )\n        {\n            float f = 0.0;\n            f += 0.5000*noise( p ); p = m*p*2.02;\n            f += 0.2500*noise( p ); p = m*p*2.03;\n            f += 0.1250*noise( p ); p = m*p*2.01;\n            f += 0.0625*noise( p );\n            return f/0.9375;\n        }\n\n        float fbm6( vec2 p )\n        {\n            float f = 0.0;\n            f += 0.500000*(0.5+0.5*noise( p )); p = m*p*2.02;\n            f += 0.250000*(0.5+0.5*noise( p )); p = m*p*2.03;\n            f += 0.125000*(0.5+0.5*noise( p )); p = m*p*2.01;\n            f += 0.062500*(0.5+0.5*noise( p )); p = m*p*2.04;\n            f += 0.031250*(0.5+0.5*noise( p )); p = m*p*2.01;\n            f += 0.015625*(0.5+0.5*noise( p ));\n            return f/0.96875;\n        }\n\n        vec2 fbm4_2( vec2 p )\n        {\n            return vec2(fbm4(p), fbm4(p+vec2(7.8)));\n        }\n\n        vec2 fbm6_2( vec2 p )\n        {\n            return vec2(fbm6(p+vec2(16.8)), fbm6(p+vec2(11.5)));\n        }\n\n        //====================================================================\n\n        float func( vec2 q, out vec4 ron )\n        {\n            q += 0.03*sin( vec2(0.27,0.23)*iTime + length(q)*vec2(4.1,4.3));\n\n            vec2 o = fbm4_2( 0.9*q );\n\n            o += 0.04*sin( vec2(0.12,0.14)*iTime + length(o));\n\n            vec2 n = fbm6_2( 3.0*o );\n\n            ron = vec4( o, n );\n\n            float f = 0.5 + 0.5*fbm4( 1.8*q + 6.0*n );\n\n            return mix( f, f*f*f*3.5, f*abs(n.x) );\n        }\n\n\n\n        void main(void) {\n            \n            vec2 p = (vUv - 0.4) * 2.0;\n            float e = 2.0/iResolution.y;\n\n    vec4 on = vec4(0.0);\n    float f = func(p, on);\n\n\tvec3 col = vec3(0.0);\n    col = mix( vec3(0.2,0.1,0.4), vec3(0.3,0.05,0.05), f );\n    col = mix( col, vec3(0.9,0.9,0.9), dot(on.zw,on.zw) );\n    col = mix( col, vec3(0.4,0.3,0.3), 0.2 + 0.5*on.y*on.y );\n    col = mix( col, vec3(0.0,0.2,0.4), 0.5*smoothstep(1.2,1.3,abs(on.z)+abs(on.w)) );\n    col = clamp( col*f*2.0, 0.0, 1.0 );\n    \n#if 0\n    // gpu derivatives - bad quality, but fast\n\tvec3 nor = normalize( vec3( dFdx(f)*iResolution.x, 6.0, dFdy(f)*iResolution.y ) );\n#else    \n    // manual derivatives - better quality, but slower\n    vec4 kk;\n \tvec3 nor = normalize( vec3( func(p+vec2(e,0.0),kk)-f, \n                                2.0*e,\n                                func(p+vec2(0.0,e),kk)-f ) );\n#endif    \n\n    vec3 lig = normalize( vec3( 0.9, 0.2, -0.4 ) );\n    float dif = clamp( 0.3+0.7*dot( nor, lig ), 0.0, 1.0 );\n    vec3 lin = vec3(0.70,0.90,0.95)*(nor.y*0.5+0.5) + vec3(0.15,0.10,0.05)*dif;\n    col *= 1.2*lin;\n\tcol = 1.0 - col;\n\tcol = 1.1*col*col;\n    \n    gl_FragColor = vec4( col, 1.0 ); \n        }\n\t\t";return n}},Object(i["a"])(o,"effect18",(function(){var n='\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 iMouse;\n\t\tvarying vec2 vUv;\n\n        float Hash2d(vec2 uv)\n        {\n            float f = uv.x + uv.y * 47.0;\n            return fract(cos(f*3.333)*100003.9);\n        }\n        float Hash3d(vec3 uv)\n        {\n            float f = uv.x + uv.y * 37.0 + uv.z * 521.0;\n            return fract(cos(f*3.333)*100003.9);\n        }\n        float mixP(float f0, float f1, float a)\n        {\n            return mix(f0, f1, a*a*(3.0-2.0*a));\n        }\n        const vec2 zeroOne = vec2(0.0, 1.0);\n        float noise2d(vec2 uv)\n        {\n            vec2 fr = fract(uv.xy);\n            vec2 fl = floor(uv.xy);\n            float h00 = Hash2d(fl);\n            float h10 = Hash2d(fl + zeroOne.yx);\n            float h01 = Hash2d(fl + zeroOne);\n            float h11 = Hash2d(fl + zeroOne.yy);\n            return mixP(mixP(h00, h10, fr.x), mixP(h01, h11, fr.x), fr.y);\n        }\n         \n        float noise(vec3 uv)\n        {\n            vec3 fr = fract(uv.xyz);\n            vec3 fl = floor(uv.xyz);\n            float h000 = Hash3d(fl);\n            float h100 = Hash3d(fl + zeroOne.yxx);\n            float h010 = Hash3d(fl + zeroOne.xyx);\n            float h110 = Hash3d(fl + zeroOne.yyx);\n            float h001 = Hash3d(fl + zeroOne.xxy);\n            float h101 = Hash3d(fl + zeroOne.yxy);\n            float h011 = Hash3d(fl + zeroOne.xyy);\n            float h111 = Hash3d(fl + zeroOne.yyy);\n            return mixP(\n                mixP(mixP(h000, h100, fr.x), mixP(h010, h110, fr.x), fr.y),\n                mixP(mixP(h001, h101, fr.x), mixP(h011, h111, fr.x), fr.y)\n                , fr.z);\n        }\n        \n        float PI=3.14159265;\n        \n       \n        \n        float Density(vec3 p)\n        {\n            //float ws = 0.06125*0.125;\n            //vec3 warp = vec3(noise(p*ws), noise(p*ws + 111.11), noise(p*ws + 7111.11));\n            float final = noise(p*0.06125);// + sin(iTime)*0.5-1.95 + warp.x*4.0;\n            float other = noise(p*0.06125 + 1234.567);\n            other -= 0.5;\n            final -= 0.5;\n            final = 0.1/(abs(final*final*other));\n            final += 0.5;\n            return final*0.0001;\n        }\n        \n\n        void main(void) {\n            \n            vec2 uv = (vUv - 0.4) * 2.0;\n            // Camera up vector.\n            vec3 camUp=vec3(0,1,0); // vuv\n\n            // Camera lookat.\n            vec3 camLookat=vec3(0,0.0,0);\t// vrp\n\n            float mx=0.0/iResolution.x*PI*2.0 + iTime * 0.01;\n            float my=0.0/iResolution.y*10.0 + sin(iTime * 0.03)*0.2+0.2;//*PI/2.01;\n            vec3 camPos=vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*(200.2); \t// prp\n\n            // Camera setup.\n            vec3 camVec=normalize(camLookat - camPos);//vpn\n            vec3 sideNorm=normalize(cross(camUp, camVec));\t// u\n            vec3 upNorm=cross(camVec, sideNorm);//v\n            vec3 worldFacing=(camPos + camVec);//vcv\n            vec3 worldPix = worldFacing + uv.x * sideNorm * (iResolution.x/iResolution.y) + uv.y * upNorm;//scrCoord\n            vec3 relVec = normalize(worldPix - camPos);//scp\n\n            float t = 0.0;\n            float inc = 0.02;\n            float maxDepth = 70.0;\n            vec3 pos = vec3(0,0,0);\n            float density = 0.0;\n            // ray marching time\n            for (int i = 0; i < 37; i++)\t// This is the count of how many times the ray actually marches.\n            {\n                if ((t > maxDepth)) break;\n                pos = camPos + relVec * t;\n                float temp = Density(pos); \n\n                inc = 1.9 + temp*0.05;\t// add temp because this makes it look extra crazy!\n                density += temp * inc;\n                t += inc;\n            }\n\n            vec3 finalColor = vec3(0.01,0.1,1.0)* density*0.2;\n\n            // output the final color with sqrt for "gamma correction"\n            gl_FragColor = vec4(sqrt(clamp(finalColor, 0.0, 1.0)),1.0);\n        }\n\t\t';return n})),Object(i["a"])(o,"effect19",(function(){var n="\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 iMouse;\n\t\tvarying vec2 vUv;\n \n\n        #define PI 3.1415926\n        #define NUM 20.\n        #define PALETTE vec3(.0, 1.4, 2.)+1.5\n\n        #define COLORED\n        #define MIRROR\n        //#define ROTATE\n        #define ROT_OFST\n        #define TRIANGLE_NOISE\n\n        //#define SHOW_TRIANGLE_NOISE_ONLY\n\n        mat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n        float tri(in float x){return abs(fract(x)-.5);}\n        vec2 tri2(in vec2 p){return vec2(tri(p.x+tri(p.y*2.)),tri(p.y+tri(p.x*2.)));}\n        mat2 m2 = mat2( 0.970,  0.242, -0.242,  0.970 );\n\n        float triangleNoise(in vec2 p)\n{\n    float z=1.5;\n    float z2=1.5;\n\tfloat rz = 0.;\n    vec2 bp = p;\n\tfor (float i=0.; i<=3.; i++ )\n\t{\n        vec2 dg = tri2(bp*2.)*.8;\n        dg *= mm2(iTime*.3);\n        p += dg/z2;\n\n        bp *= 1.6;\n        z2 *= .6;\n\t\tz *= 1.8;\n\t\tp *= 1.2;\n        p*= m2;\n        \n        rz+= (tri(p.x+tri(p.y)))/z;\n\t}\n\treturn rz;\n}\n        \n\n        void main(void) {\n            float time = iTime* 1.2;\n            float aspect = iResolution.x/iResolution.y;\n        float w = 50./sqrt(iResolution.x*aspect+iResolution.y);\n\n            vec2 p = (vUv -0.5) * 2.0 ;\n            p.x *= aspect;\n            p*= 1.05;\n            vec2 bp = p;\n            \n            #ifdef ROTATE\n            p *= mm2(time*.25);\n            #endif\n            \n            float lp = length(p);\n            float id = floor(lp*NUM+.5)/NUM;\n            \n            #ifdef ROT_OFST\n            p *= mm2(id*11.);\n            #endif\n            \n            #ifdef MIRROR\n            p.y = abs(p.y); \n            #endif\n            \n            //polar coords\n            vec2 plr = vec2(lp, atan(p.y, p.x));\n            \n            //Draw concentric circles\n            float rz = 1.-pow(abs(sin(plr.x*PI*NUM))*1.25/pow(w,0.25),2.5);\n            \n            //get the current arc length for a given id\n            float enp = plr.y+sin((time+id*5.5))*1.52-1.5;\n            rz *= smoothstep(0., 0.05, enp);\n            \n            //smooth out both sides of the arcs (and clamp the number)\n            rz *= smoothstep(0.,.022*w/plr.x, enp)*step(id,1.);\n            #ifndef MIRROR\n            rz *= smoothstep(-0.01,.02*w/plr.x,PI-plr.y);\n            #endif\n            \n            #ifdef TRIANGLE_NOISE\n            rz *= (triangleNoise(p/(w*w))*0.9+0.4);\n            vec3 col = (sin(PALETTE+id*5.+time)*0.5+0.5)*rz;\n            col += smoothstep(.4,1.,rz)*0.15;\n            col *= smoothstep(.2,1.,rz)+1.;\n            \n            #else\n            vec3 col = (sin(PALETTE+id*5.+time)*0.5+0.5)*rz;\n            col *= smoothstep(.8,1.15,rz)*.7+.8;\n            #endif\n            \n            #ifndef COLORED\n            col = vec3(dot(col,vec3(.7)));\n            #endif\n            \n            #ifdef SHOW_TRIANGLE_NOISE_ONLY\n            col = vec3(triangleNoise(bp));\n            #endif\n            \n            gl_FragColor = vec4(col,1.0);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect20",(function(){var n="\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 iMouse;\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D iChannel0;\n \n\n        vec2 rotate(vec2 p, float a)\n        {\n            return vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n        }\n\n        // 1D random numbers\n        float rand(float n)\n        {\n            return fract(sin(n) * 43758.5453123);\n        }\n\n        // 2D random numbers\n        vec2 rand2(in vec2 p)\n        {\n            return fract(vec2(sin(p.x * 591.32 + p.y * 154.077), cos(p.x * 391.32 + p.y * 49.077)));\n        }\n\n        // 1D noise\n        float noise1(float p)\n        {\n            float fl = floor(p);\n            float fc = fract(p);\n            return mix(rand(fl), rand(fl + 1.0), fc);\n        }\n\n        // voronoi distance noise, based on iq's articles\n        float voronoi(in vec2 x)\n        {\n            vec2 p = floor(x);\n            vec2 f = fract(x);\n            \n            vec2 res = vec2(8.0);\n            for(int j = -1; j <= 1; j ++)\n            {\n                for(int i = -1; i <= 1; i ++)\n                {\n                    vec2 b = vec2(i, j);\n                    vec2 r = vec2(b) - f + rand2(p + b);\n                    \n                    // chebyshev distance, one of many ways to do this\n                    float d = max(abs(r.x), abs(r.y));\n                    \n                    if(d < res.x)\n                    {\n                        res.y = res.x;\n                        res.x = d;\n                    }\n                    else if(d < res.y)\n                    {\n                        res.y = d;\n                    }\n                }\n            }\n            return res.y - res.x;\n        }\n\n        void main(void) {\n            float flicker = noise1(iTime * 2.0) * 0.8 + 0.4;\n\n            vec2 uv = vUv;\n            uv = (uv - 0.5) * 3.0;\n            vec2 suv = uv;\n            uv.x *= iResolution.x / iResolution.y;\n            \n            \n            float v = 0.0;\n            \n            // that looks highly interesting:\n            //v = 1.0 - length(uv) * 1.3;\n            \n            \n            // a bit of camera movement\n            uv *= 0.6 + sin(iTime * 0.1) * 0.4;\n            uv = rotate(uv, sin(iTime * 0.3) * 1.0);\n            uv += iTime * 0.4;\n            \n            \n            // add some noise octaves\n            float a = 0.6, f = 1.0;\n            \n            for(int i = 0; i < 3; i ++) // 4 octaves also look nice, its getting a bit slow though\n            {\t\n                float v1 = voronoi(uv * f + 5.0);\n                float v2 = 0.0;\n                \n                // make the moving electrons-effect for higher octaves\n                if(i > 0)\n                {\n                    // of course everything based on voronoi\n                    v2 = voronoi(uv * f * 0.5 + 50.0 + iTime);\n                    \n                    float va = 0.0, vb = 0.0;\n                    va = 1.0 - smoothstep(0.0, 0.1, v1);\n                    vb = 1.0 - smoothstep(0.0, 0.08, v2);\n                    v += a * pow(va * (0.5 + vb), 2.0);\n                }\n                \n                // make sharp edges\n                v1 = 1.0 - smoothstep(0.0, 0.3, v1);\n                \n                // noise is used as intensity map\n                v2 = a * (noise1(v1 * 5.5 + 0.1));\n                \n                // octave 0's intensity changes a bit\n                if(i == 0)\n                    v += v2 * flicker;\n                else\n                    v += v2;\n                \n                f *= 3.0;\n                a *= 0.7;\n            }\n\n            // slight vignetting\n            v *= exp(-0.6 * length(suv)) * 1.2;\n            \n            // use texture channel0 for color? why not.\n            vec3 cexp = texture2D(iChannel0, uv * 0.001).xyz * 3.0 + texture2D(iChannel0, uv * 0.01).xyz;//vec3(1.0, 2.0, 4.0);\n            cexp *= 1.4;\n            \n            // old blueish color set\n            //vec3 cexp = vec3(6.0, 4.0, 2.0);\n            \n            vec3 col = vec3(pow(v, cexp.x), pow(v, cexp.y), pow(v, cexp.z)) * 2.0;\n            \n            gl_FragColor = vec4(col, 1.0);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect21",(function(){var n="\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 iMouse;\n\t\tvarying vec2 vUv; \n        \n        float hexLength(vec2 v) {\n            vec2 a = abs(v);\n            return max((2.0/sqrt(3.0))*a.x, (1.0/sqrt(3.0))*a.x + a.y);\n        }\n\n        void main(void) {\n            vec3 c;\n            float l,z=iTime;\n            for(int i=0;i<3;i++) {\n                vec2 uv,p=vUv;\n                uv=p;\n                p-=.5;\n                p.x*=iResolution.x/iResolution.y;\n                z+=.07;\n                l=hexLength(p);\n                uv+=p/l*(sin(z)+1.)*abs(sin(l*9.-z*2.));\n                c[i]=.01/hexLength(abs(mod(uv,1.)-.5));\n            }\n            gl_FragColor=vec4(c/l,iTime); \n        }\n\t\t";return n})),Object(i["a"])(o,"effect22",(function(){var n="\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 iMouse;\n\t\tvarying vec2 vUv;  \n        \n        float Circle(vec2 uv, vec2 pos, float r){\n \t\n            float d = length(uv - pos);\n            return r / d;\n        }\n        \n        \n        float random(vec2 p)\n        {\n             return fract(sin(dot(vec2(100.,324.), p)) * 22141.);   \n        }\n        \n\n        void main(void) {\n            // vc - voronoi coords, mc - metaballs coords\n            vec2 vc = (vUv - 0.5) * 2.0;\n            vec2 mc = vc ;\n            vc.x *= iResolution.x/iResolution.y;\n            mc.x *= iResolution.x/iResolution.y;\n            \n            \n            // voronoi\n            vc *= 9.; \n            vec2 i = floor(vc);\n            vec2 gv = fract(vc) - .5;\n            \n            float minDist = 1.;\n            \n            for(float y = -1.; y <= 1.; y++)\n            {\n                 for(float x = -1.; x <= 1.; x++)\n                {\n                    vec2 o = vec2(x,y);\n                     vec2 rp = vec2(random(i + o.xy), random(i + o.xy));  \n                    vec2 p = o + sin(rp * iTime) * .5;\n                    float d = length(gv - p);\n                    \n                    if(d < minDist){\n                        minDist = d;\n                    }\n                }\n            }\n            \n            vec3 col = vec3(.5,.75,1.5) * minDist;\n            \n            \n            // metaballs\n            float r = .05;\n            float c = Circle(mc, vec2(sin(iTime * 2.) * .4,  cos(iTime * .4) * .4), r);\n            c += Circle(mc, vec2(sin(iTime * .5) * .4, cos(iTime * .7) * .4), r);\n            c += Circle(mc, vec2(sin(iTime * .7) * .4, cos(iTime * .8) * .4), r);\n            c += Circle(mc, vec2(sin(iTime * .2) * .4, cos(iTime * .3) * .4), r);\n            c += Circle(mc, vec2(sin(iTime * .3) * .4, cos(iTime * .4) * .4), r);\n            c += Circle(mc, vec2(sin(iTime * .6) * .4, cos(iTime) * .4), r);\n            c += Circle(mc, vec2(sin(iTime * .5) * .4, cos(iTime * .2) * .4), r);\n          \n            \n        \n            // Output to screen\n            gl_FragColor = vec4(col,1.0) * c * 1.5;\n        }\n\t\t";return n})),Object(i["a"])(o,"effect23",(function(){var n="\n\t\tuniform float iTime;\n\t\tuniform sampler2D iChannel0;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 iMouse;\n\t\tvarying vec2 vUv;  \n        \n        #define NUM_RAYS 13.\n\n#define VOLUMETRIC_STEPS 19\n\n#define MAX_ITER 35\n#define FAR 6.\n\n#define time iTime*1.1\n\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\nfloat noise( in float x ){return texture2D(iChannel0, vec2(x*.01,1.),0.0).x;}\n\nfloat hash( float n ){return fract(sin(n)*43758.5453);}\n\nfloat noise(in vec3 p)\n{\n\tvec3 ip = floor(p);\n    vec3 fp = fract(p);\n\tfp = fp*fp*(3.0-2.0*fp);\n\t\n\tvec2 tap = (ip.xy+vec2(37.0,17.0)*ip.z) + fp.xy;\n\tvec2 rg = texture2D( iChannel0, (tap + 0.5)/256.0, 0.0 ).yx;\n\treturn mix(rg.x, rg.y, fp.z);\n}\n\nmat3 m3 = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n\n\n//See: https://www.shadertoy.com/view/XdfXRj\nfloat flow(in vec3 p, in float t)\n{\n\tfloat z=2.;\n\tfloat rz = 0.;\n\tvec3 bp = p;\n\tfor (float i= 1.;i < 5.;i++ )\n\t{\n\t\tp += time*.1;\n\t\trz+= (sin(noise(p+t*0.8)*6.)*0.5+0.5) /z;\n\t\tp = mix(bp,p,0.6);\n\t\tz *= 2.;\n\t\tp *= 2.01;\n        p*= m3;\n\t}\n\treturn rz;\t\n}\n\n//could be improved\nfloat sins(in float x)\n{\n \tfloat rz = 0.;\n    float z = 2.;\n    for (float i= 0.;i < 3.;i++ )\n\t{\n        rz += abs(fract(x*1.4)-0.5)/z;\n        x *= 1.3;\n        z *= 1.15;\n        x -= time*.65*z;\n    }\n    return rz;\n}\n\nfloat segm( vec3 p, vec3 a, vec3 b)\n{\n    vec3 pa = p - a;\n\tvec3 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1. );\t\n\treturn length( pa - ba*h )*.5;\n}\n\nvec3 path(in float i, in float d)\n{\n    vec3 en = vec3(0.,0.,1.);\n    float sns2 = sins(d+i*0.5)*0.22;\n    float sns = sins(d+i*.6)*0.21;\n    en.xz *= mm2((hash(i*10.569)-.5)*6.2+sns2);\n    en.xy *= mm2((hash(i*4.732)-.5)*6.2+sns);\n    return en;\n}\n\nvec2 map(vec3 p, float i)\n{\n\tfloat lp = length(p);\n    vec3 bg = vec3(0.);   \n    vec3 en = path(i,lp);\n    \n    float ins = smoothstep(0.11,.46,lp);\n    float outs = .15+smoothstep(.0,.15,abs(lp-1.));\n    p *= ins*outs;\n    float id = ins*outs;\n    \n    float rz = segm(p, bg, en)-0.011;\n    return vec2(rz,id);\n}\n\nfloat march(in vec3 ro, in vec3 rd, in float startf, in float maxd, in float j)\n{\n\tfloat precis = 0.001;\n    float h=0.5;\n    float d = startf;\n    for( int i=0; i<MAX_ITER; i++ )\n    {\n        if( abs(h)<precis||d>maxd ) break;\n        d += h*1.2;\n\t    float res = map(ro+rd*d, j).x;\n        h = res;\n    }\n\treturn d;\n}\n\n//volumetric marching\nvec3 vmarch(in vec3 ro, in vec3 rd, in float j, in vec3 orig)\n{   \n    vec3 p = ro;\n    vec2 r = vec2(0.);\n    vec3 sum = vec3(0);\n    float w = 0.;\n    for( int i=0; i<VOLUMETRIC_STEPS; i++ )\n    {\n        r = map(p,j);\n        p += rd*.03;\n        float lp = length(p);\n        \n        vec3 col = sin(vec3(1.05,2.5,1.52)*3.94+r.y)*.85+0.4;\n        col.rgb *= smoothstep(.0,.015,-r.x);\n        col *= smoothstep(0.04,.2,abs(lp-1.1));\n        col *= smoothstep(0.1,.34,lp);\n        sum += abs(col)*5. * (1.2-noise(lp*2.+j*13.+time*5.)*1.1) / (log(distance(p,orig)-2.)+.75);\n    }\n    return sum;\n}\n\n//returns both collision dists of unit sphere\nvec2 iSphere2(in vec3 ro, in vec3 rd)\n{\n    vec3 oc = ro;\n    float b = dot(oc, rd);\n    float c = dot(oc,oc) - 1.;\n    float h = b*b - c;\n    if(h <0.0) return vec2(-1.);\n    else return vec2((-b - sqrt(h)), (-b + sqrt(h)));\n}\n        \n        \n\n        void main(void) {\n            vec2 p = (vUv - 0.5 ) * 2.0;\n            p.x*=iResolution.x/iResolution.y;\n\tvec2 um = vec2(iTime, .0) / iResolution.xy-.5;\n    \n\t//camera\n\tvec3 ro = vec3(0.,0.,5.);\n    vec3 rd = normalize(vec3(p*.7,-1.5));\n    mat2 mx = mm2(time*.4+um.x*6.);\n    mat2 my = mm2(time*0.3+um.y*6.); \n    ro.xz *= mx;rd.xz *= mx;\n    ro.xy *= my;rd.xy *= my;\n    \n    vec3 bro = ro;\n    vec3 brd = rd;\n\t\n    vec3 col = vec3(0.0125,0.,0.025);\n    #if 1\n    for (float j = 1.;j<NUM_RAYS+1.;j++)\n    {\n        ro = bro;\n        rd = brd;\n        mat2 mm = mm2((time*0.1+((j+1.)*5.1))*j*0.25);\n        ro.xy *= mm;rd.xy *= mm;\n        ro.xz *= mm;rd.xz *= mm;\n        float rz = march(ro,rd,2.5,FAR,j);\n\t\tif ( rz >= FAR)continue;\n    \tvec3 pos = ro+rz*rd;\n    \tcol = max(col,vmarch(pos,rd,j, bro));\n    }\n    #endif\n    \n    ro = bro;\n    rd = brd;\n    vec2 sph = iSphere2(ro,rd);\n    \n    if (sph.x > 0.)\n    {\n        vec3 pos = ro+rd*sph.x;\n        vec3 pos2 = ro+rd*sph.y;\n        vec3 rf = reflect( rd, pos );\n        vec3 rf2 = reflect( rd, pos2 );\n        float nz = (-log(abs(flow(rf*1.2,time)-.01)));\n        float nz2 = (-log(abs(flow(rf2*1.2,-time)-.01)));\n        col += (0.1*nz*nz* vec3(0.12,0.12,.5) + 0.05*nz2*nz2*vec3(0.55,0.2,.55))*0.8;\n    }\n    \n\tgl_FragColor = vec4(col*1.3, 1.0);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect24",(function(){var n="\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution;  \n\t\tvarying vec2 vUv;  \n         \n        void main(void) {\n            vec2 p = (vUv - 0.5 ) * 2.0;\n            // vec2 p = (2.0*fragCoord-iResolution.xy)/min(iResolution.y,iResolution.x);\n\t\n            // background color\n            vec3 bcol = vec3(1.0,0.8,0.7-0.07*p.y)*(1.0-0.25*length(p));\n        \n            // animate\n            float tt = mod(iTime,1.5)/1.5;\n            float ss = pow(tt,.2)*0.5 + 0.5;\n            ss = 1.0 + ss*0.5*sin(tt*6.2831*3.0 + p.y*0.5)*exp(-tt*4.0);\n            p *= vec2(0.5,1.5) + ss*vec2(0.5,-0.5);\n        \n            // shape\n        #if 0\n            p *= 0.8;\n            p.y = -0.1 - p.y*1.2 + abs(p.x)*(1.0-abs(p.x));\n            float r = length(p);\n            float d = 0.5;\n        #else\n            p.y -= 0.25;\n            float a = atan(p.x,p.y)/3.141593;\n            float r = length(p);\n            float h = abs(a);\n            float d = (13.0*h - 22.0*h*h + 10.0*h*h*h)/(6.0-5.0*h);\n        #endif\n            \n            // color\n            float s = 0.75 + 0.75*p.x;\n            s *= 1.0-0.4*r;\n            s = 0.3 + 0.7*s;\n            s *= 0.5+0.5*pow( 1.0-clamp(r/d, 0.0, 1.0 ), 0.1 );\n            vec3 hcol = vec3(1.0,0.4*r,0.3)*s;\n            \n            vec3 col = mix( bcol, hcol, smoothstep( -0.01, 0.01, d-r) );\n        \n            gl_FragColor = vec4(col,1.0);\n\t        // gl_FragColor = vec4(col*1.3, 1.0);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect25",(function(){var n="\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution;  \n\t\t  \n        uniform sampler2D iChannel0;\n\t\tvarying vec2 vUv;  \n        #define MIN_HEIGHT 2.0\n        #define MAX_HEIGHT 4.5\n        #define WIND vec2(0.2, 0.1)\n         \n        vec3 sundir = normalize(vec3(1.0,0.75,1.0));\n\n        float noise( in vec3 x )\n        {\n            vec3 f = fract(x);\n            vec3 p = floor(x);\n            f = f * f * (3.0 - 2.0 * f);\n            \n            p.xz += WIND * iTime;\n            vec2 uv = (p.xz + vec2(37.0, 17.0) * p.y) + f.xz;\n            vec2 rg = texture2D(iChannel0, (uv + 0.5)/256.0, 0.0).yx;\n            return mix(rg.x, rg.y, f.y);\n        }\n\n        float fractal_noise(vec3 p)\n        {\n            float f = 0.0;\n            // add animation\n            //p = p - vec3(1.0, 1.0, 0.0) * iTime * 0.1;\n            p = p * 3.0;\n            f += 0.50000 * noise(p); p = 2.0 * p;\n            f += 0.25000 * noise(p); p = 2.0 * p;\n            f += 0.12500 * noise(p); p = 2.0 * p;\n            f += 0.06250 * noise(p); p = 2.0 * p;\n            f += 0.03125 * noise(p);\n            \n            return f;\n        }\n\n        float density(vec3 pos)\n        {    \n            float den = 3.0 * fractal_noise(pos * 0.3) - 2.0 + (pos.y - MIN_HEIGHT);\n            float edge = 1.0 - smoothstep(MIN_HEIGHT, MAX_HEIGHT, pos.y);\n            edge *= edge;\n            den *= edge;\n            den = clamp(den, 0.0, 1.0);\n            \n            return den;\n        }\n\n        vec3 raymarching(vec3 ro, vec3 rd, float t, vec3 backCol)\n        {   \n            vec4 sum = vec4(0.0);\n            vec3 pos = ro + rd * t;\n            for (int i = 0; i < 40; i++) {\n                if (sum.a > 0.99 || \n                    pos.y < (MIN_HEIGHT-1.0) || \n                    pos.y > (MAX_HEIGHT+1.0)) break;\n                \n                float den = density(pos);\n                \n                if (den > 0.01) {\n                    float dif = clamp((den - density(pos+0.3*sundir))/0.6, 0.0, 1.0);\n\n                    vec3 lin = vec3(0.65,0.7,0.75)*1.5 + vec3(1.0, 0.6, 0.3)*dif;        \n                    vec4 col = vec4( mix( vec3(1.0,0.95,0.8)*1.1, vec3(0.35,0.4,0.45), den), den);\n                    col.rgb *= lin;\n\n                    // front to back blending    \n                    col.a *= 0.5;\n                    col.rgb *= col.a;\n\n                    sum = sum + col*(1.0 - sum.a); \n                }\n                \n                t += max(0.05, 0.02 * t);\n                pos = ro + rd * t;\n            }\n            \n            sum = clamp(sum, 0.0, 1.0);\n            \n            float h = rd.y;\n            sum.rgb = mix(sum.rgb, backCol, exp(-20.*h*h) );\n            \n            return mix(backCol, sum.xyz, sum.a);\n        }\n\n        float planeIntersect( vec3 ro, vec3 rd, float plane)\n        {\n            float h = plane - ro.y;\n            return h/rd.y;\n        }\n\n        mat3 setCamera(vec3 ro, vec3 ta, float cr)\n        {\n            vec3 cw = normalize(ta-ro);\n            vec3 cp = vec3(sin(cr), cos(cr),0.0);\n            vec3 cu = normalize( cross(cw,cp) );\n            vec3 cv = normalize( cross(cu,cw) );\n            return mat3( cu, cv, cw );\n        }\n        void main(void) {\n            vec4 iMouse = vec4(iTime * 3.0, iTime, 0.2, iTime);\n            vec2 p = (vUv - 0.5) * 4.0 ;\n            vec2 mo = vec2(0.0);\n            if (iMouse.z > 0.0) \n            {\n                mo += (2.0 * iMouse.xy - iResolution.xy) / iResolution.yy;\n            }\n            \n            vec3 ro = vec3(0.0, 0.0, -2.0);\n            \n            // Rotate the camera\n            vec3 target = vec3(ro.x+10., 1.0+mo.y*3.0, ro.z);\n            \n            vec2 cossin = vec2(cos(mo.x), sin(mo.x));\n            mat3 rot = mat3(cossin.x, 0.0, -cossin.y,\n                            0.0, 1.0, 0.0,\n                            cossin.y, 0.0, cossin.x);\n            target = rot * (target - ro) + ro;\n            \n            // Compute the ray\n            vec3 rd = setCamera(ro, target, 0.0) * normalize(vec3(p.xy, 1.5));\n            \n            float dist = planeIntersect(ro, rd, MIN_HEIGHT);\n            \n            float sun = clamp(dot(sundir, rd), 0.0, 1.0);\n            vec3 col = mix(vec3(0.78,0.78,0.7), vec3(0.3,0.4,0.5), p.y * 0.5 + 0.5);\n            col += 0.5*vec3(1.0,0.5,0.1)*pow(sun, 8.0);\n            \n            if (dist > 0.0) {\n                col = raymarching(ro, rd, dist, col);\n            }\n            \n            gl_FragColor = vec4(col, 1.0);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect26",(function(){var n="\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;  \n\n        vec3 COLOR1 = vec3(0.0, 0.0, 0.3);\n        vec3 COLOR2 = vec3(0.5, 0.0, 0.0);\n        float BLOCK_WIDTH = 0.01;\n\n        void main(void) {\n            vec2 uv = (vUv - 0.3) * 2.0 ;\n            \n            // To create the BG pattern\n            vec3 final_color = vec3(1.0);\n            vec3 bg_color = vec3(0.0);\n            vec3 wave_color = vec3(0.0);\n            \n            float c1 = mod(uv.x, 2.0 * BLOCK_WIDTH);\n            c1 = step(BLOCK_WIDTH, c1);\n            \n            float c2 = mod(uv.y, 2.0 * BLOCK_WIDTH);\n            c2 = step(BLOCK_WIDTH, c2);\n            \n            bg_color = mix(uv.x * COLOR1, uv.y * COLOR2, c1 * c2);\n            \n            \n            // To create the waves\n            float wave_width = 0.01;\n            uv  = -1.0 + 2.0 * uv;\n            uv.y += 0.1;\n            for(float i = 0.0; i < 10.0; i++) {\n                \n                uv.y += (0.07 * sin(uv.x + i/7.0 + iTime ));\n                wave_width = abs(1.0 / (150.0 * uv.y));\n                wave_color += vec3(wave_width * 1.9, wave_width, wave_width * 1.5);\n            }\n            \n            final_color = bg_color + wave_color;\n            \n            \n            gl_FragColor = vec4(final_color, 1.0);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect27",(function(){var n="\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;  \n\n        mat2 m(float a){float c=cos(a), s=sin(a);return mat2(c,-s,s,c);}\n        float map(vec3 p){\n            p.xz*= m(iTime*0.4);p.xy*= m(iTime*0.3);\n            vec3 q = p*2.+iTime;\n            return length(p+vec3(sin(iTime*0.7)))*log(length(p)+1.) + sin(q.x+sin(q.z+sin(q.y)))*0.5 - 1.;\n        }\n\n\n        void main(void) { \n            \n            vec2 p = (vUv - 0.5) * 2.0  ;\n            vec3 cl = vec3(0.);\n            float d = 2.5;\n            for(int i=0; i<=5; i++)\t{\n                vec3 p = vec3(0,0,5.) + normalize(vec3(p, -1.))*d;\n                float rz = map(p);\n                float f =  clamp((rz - map(p+.1))*0.5, -.1, 1. );\n                vec3 l = vec3(0.1,0.3,.4) + vec3(5., 2.5, 3.)*f;\n                cl = cl*l + smoothstep(2.5, .0, rz)*.7*l;\n                d += min(rz, 1.);\n            }\n            gl_FragColor = vec4(cl, 1.);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect28",(function(){var n="\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;  \n\n        float sdSphere(vec3 pos, float size)\n        {\n            return length(pos) - size;\n        }\n\n        float sdBox(vec3 pos, vec3 size)\n        {\n            pos = abs(pos) - vec3(size);\n            return max(max(pos.x, pos.y), pos.z);\n        }\n\n        float sdOctahedron(vec3 p, float s)\n        {\n            p = abs(p);\n            float m = p.x+p.y+p.z-s;\n            vec3 q;\n                if( 3.0*p.x < m ) q = p.xyz;\n            else if( 3.0*p.y < m ) q = p.yzx;\n            else if( 3.0*p.z < m ) q = p.zxy;\n            else return m*0.57735027;\n            \n            float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n            return length(vec3(q.x,q.y-s+k,q.z-k)); \n        }\n\n        float sdPlane(vec3 pos)\n        {\n            return pos.y;\n        }\n\n        mat2 rotate(float a)\n        {\n            float s = sin(a);\n            float c = cos(a);\n            return mat2(c, s, -s, c);\n        }\n\n        vec3 repeat(vec3 pos, vec3 span)\n        {\n            return abs(mod(pos, span)) - span * 0.5;\n        }\n\n        float getDistance(vec3 pos, vec2 uv)\n        {\n            vec3 originalPos = pos;\n\n            for(int i = 0; i < 3; i++)\n            {\n                pos = abs(pos) - 4.5;\n                pos.xz *= rotate(1.0);\n                pos.yz *= rotate(1.0);\n            }\n\n            pos = repeat(pos, vec3(4.0));\n\n            float d0 = abs(originalPos.x) - 0.1;\n            float d1 = sdBox(pos, vec3(0.8));\n\n            pos.xy *= rotate(mix(1.0, 2.0, abs(sin(iTime))));\n            float size = mix(1.1, 1.3, (abs(uv.y) * abs(uv.x)));\n            float d2 = sdSphere(pos, size);\n            float dd2 = sdOctahedron(pos, 1.8);\n            float ddd2 = mix(d2, dd2, abs(sin(iTime)));\n        \n            return max(max(d1, -ddd2), -d0);\n        }\n\n\n\n        void main(void) { \n            \n            vec2 p = (vUv - 0.5) * 4.5;\n            // camera\n            vec3 cameraOrigin = vec3(0.0, 0.0, -10.0 + iTime * 4.0);\n            vec3 cameraTarget = vec3(cos(iTime) + sin(iTime / 2.0) * 10.0, exp(sin(iTime)) * 2.0, 3.0 + iTime * 4.0);\n            vec3 upDirection = vec3(0.0, 1.0, 0.0);\n            vec3 cameraDir = normalize(cameraTarget - cameraOrigin);\n            vec3 cameraRight = normalize(cross(upDirection, cameraOrigin));\n            vec3 cameraUp = cross(cameraDir, cameraRight);\n            vec3 rayDirection = normalize(cameraRight * p.x + cameraUp * p.y + cameraDir);\n            \n            float depth = 0.0;\n            float ac = 0.0;\n            vec3 rayPos = vec3(0.0);\n            float d = 0.0;\n\n            for(int i = 0; i < 80; i++)\n            {\n                rayPos = cameraOrigin + rayDirection * depth;\n                d = getDistance(rayPos, p);\n\n                if(abs(d) < 0.0001)\n                {\n                    break;\n                }\n\n                ac += exp(-d * mix(5.0, 10.0, abs(sin(iTime))));        \n                depth += d;\n            }\n            \n            vec3 col = vec3(0.0, 0.3, 0.7);\n            ac *= 1.2 * (iResolution.x/iResolution.y - abs(p.x)) ;\n            vec3 finalCol = col * ac * 0.06;\n            gl_FragColor = vec4(finalCol, 1.0);\n            gl_FragColor.w = 1.0 - depth * 0.1;\n        }\n\t\t";return n})),Object(i["a"])(o,"effect29",(function(){var n="\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;  \n\n        #define PASS_COUNT 1\n        vec4 iMouse = vec4(.0, 0, 0.2, 0);\nfloat fBrightness = 2.5;\n\n// Number of angular segments\nfloat fSteps = 121.0;\n\nfloat fParticleSize = 0.015;\nfloat fParticleLength = 0.5 / 60.0;\n\n// Min and Max star position radius. Min must be present to prevent stars too near camera\nfloat fMinDist = 0.8;\nfloat fMaxDist = 5.0;\n\nfloat fRepeatMin = 1.0;\nfloat fRepeatMax = 2.0;\n\n// fog density\nfloat fDepthFade = 0.8;\n\nfloat Random(float x)\n{\n\treturn fract(sin(x * 123.456) * 23.4567 + sin(x * 345.678) * 45.6789 + sin(x * 456.789) * 56.789);\n}\n\nvec3 GetParticleColour( const in vec3 vParticlePos, const in float fParticleSize, const in vec3 vRayDir )\n{\t\t\n\tvec2 vNormDir = normalize(vRayDir.xy);\n\tfloat d1 = dot(vParticlePos.xy, vNormDir.xy) / length(vRayDir.xy);\n\tvec3 vClosest2d = vRayDir * d1;\n\t\n\tvec3 vClampedPos = vParticlePos;\n\t\n\tvClampedPos.z = clamp(vClosest2d.z, vParticlePos.z - fParticleLength, vParticlePos.z + fParticleLength);\n\t\n\tfloat d = dot(vClampedPos, vRayDir);\n\t\n\tvec3 vClosestPos = vRayDir * d;\n\t\n\tvec3 vDeltaPos = vClampedPos - vClosestPos;\t\n\t\t\n\tfloat fClosestDist = length(vDeltaPos) / fParticleSize;\n\t\n\tfloat fShade = \tclamp(1.0 - fClosestDist, 0.0, 1.0);\n\t\t\n\tfShade = fShade * exp2(-d * fDepthFade) * fBrightness;\n\t\n\treturn vec3(fShade);\n}\n\nvec3 GetParticlePos( const in vec3 vRayDir, const in float fZPos, const in float fSeed )\n{\n\tfloat fAngle = atan(vRayDir.x, vRayDir.y);\n\tfloat fAngleFraction = fract(fAngle / (3.14 * 2.0));\n\t\n\tfloat fSegment = floor(fAngleFraction * fSteps + fSeed) + 0.5 - fSeed;\n\tfloat fParticleAngle = fSegment / fSteps * (3.14 * 2.0);\n\n\tfloat fSegmentPos = fSegment / fSteps;\n\tfloat fRadius = fMinDist + Random(fSegmentPos + fSeed) * (fMaxDist - fMinDist);\n\t\n\tfloat tunnelZ = vRayDir.z / length(vRayDir.xy / fRadius);\n\t\n\ttunnelZ += fZPos;\n\t\n\tfloat fRepeat = fRepeatMin + Random(fSegmentPos + 0.1 + fSeed) * (fRepeatMax - fRepeatMin);\n\t\n\tfloat fParticleZ = (ceil(tunnelZ / fRepeat) - 0.5) * fRepeat - fZPos;\n\t\n\treturn vec3( sin(fParticleAngle) * fRadius, cos(fParticleAngle) * fRadius, fParticleZ );\n}\n\nvec3 Starfield( const in vec3 vRayDir, const in float fZPos, const in float fSeed )\n{\t\n\tvec3 vParticlePos = GetParticlePos(vRayDir, fZPos, fSeed);\n\t\n\treturn GetParticleColour(vParticlePos, fParticleSize, vRayDir);\t\n}\n\nvec3 RotateX( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n    \n    vec3 vResult = vec3( vPos.x, c * vPos.y + s * vPos.z, -s * vPos.y + c * vPos.z);\n    \n    return vResult;\n}\n\nvec3 RotateY( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n    \n    vec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\n    \n    return vResult;\n}\n\nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n    \n    vec3 vResult = vec3( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y, vPos.z);\n    \n    return vResult;\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, vec3 vRayOrigin, vec3 vRayDir )\n{\n/*\tvec2 vScreenUV = fragCoord.xy / iResolution.xy;\n\t\n\tvec2 vScreenPos = vScreenUV * 2.0 - 1.0;\n\tvScreenPos.x *= iResolution.x / iResolution.y;\n\n\tvec3 vRayDir = normalize(vec3(vScreenPos, 1.0));\n\n\tvec3 vEuler = vec3(0.5 + sin(iTime * 0.2) * 0.125, 0.5 + sin(iTime * 0.1) * 0.125, iTime * 0.1 + sin(iTime * 0.3) * 0.5);\n\t\t\t\n\tif(iMouse.z > 0.0)\n\t{\n\t\tvEuler.x = -((iMouse.y / iResolution.y) * 2.0 - 1.0);\n\t\tvEuler.y = -((iMouse.x / iResolution.x) * 2.0 - 1.0);\n\t\tvEuler.z = 0.0;\n\t}\n\t\t\n\tvRayDir = RotateX(vRayDir, vEuler.x);\n\tvRayDir = RotateY(vRayDir, vEuler.y);\n\tvRayDir = RotateZ(vRayDir, vEuler.z);\n*/\t\n\tfloat fShade = 0.0;\n\t\t\n\tfloat a = 0.2;\n\tfloat b = 10.0;\n\tfloat c = 1.0;\n\tfloat fZPos = 5.0 + iTime * c + sin(iTime * a) * b;\n\tfloat fSpeed = c + a * b * cos(a * iTime);\n\t\n\tfParticleLength = 0.25 * fSpeed / 60.0;\n\t\n\tfloat fSeed = 0.0;\n\t\n\tvec3 vResult = mix(vec3(0.005, 0.0, 0.01), vec3(0.01, 0.005, 0.0), vRayDir.y * 0.5 + 0.5);\n\t\n\tfor(int i=0; i<PASS_COUNT; i++)\n\t{\n\t\tvResult += Starfield(vRayDir, fZPos, fSeed);\n\t\tfSeed += 1.234;\n\t}\n\t\n\tfragColor = vec4(sqrt(vResult),1.0);\n}\n\n        void main(void) { \n             \n            vec2 vScreenUV = (vUv - 0.5) * 10.0;\n\t\n\tvec2 vScreenPos = vScreenUV * 2.0 - 1.0;\n\tvScreenPos.x *= iResolution.x / iResolution.y;\n\n\tvec3 vRayDir = normalize(vec3(vScreenPos, 1.0));\n\n\tvec3 vEuler = vec3(0.5 + sin(iTime * 0.2) * 0.125, 0.5 + sin(iTime * 0.1) * 0.125, iTime * 0.1 + sin(iTime * 0.3) * 0.5);\n\t\t\t\n\tif(iMouse.z > 0.0)\n\t{\n\t\tvEuler.x = -((iMouse.y / iResolution.y) * 2.0 - 1.0);\n\t\tvEuler.y = -((iMouse.x / iResolution.x) * 2.0 - 1.0);\n\t\tvEuler.z = 0.0;\n\t}\n\t\t\n\tvRayDir = RotateX(vRayDir, vEuler.x);\n\tvRayDir = RotateY(vRayDir, vEuler.y);\n\tvRayDir = RotateZ(vRayDir, vEuler.z);\n\t\n\tfloat fShade = 0.0;\n\t\t\n\tfloat a = 0.2;\n\tfloat b = 10.0;\n\tfloat c = 1.0;\n\tfloat fZPos = 5.0 + iTime * c + sin(iTime * a) * b;\n\tfloat fSpeed = c + a * b * cos(a * iTime);\n\t\n\tfParticleLength = 0.25 * fSpeed / 60.0;\n\t\n\tfloat fSeed = 0.0;\n\t\n\tvec3 vResult = mix(vec3(0.005, 0.0, 0.01), vec3(0.01, 0.005, 0.0), vRayDir.y * 0.5 + 0.5);\n\t\n\tfor(int i=0; i<PASS_COUNT; i++)\n\t{\n\t\tvResult += Starfield(vRayDir, fZPos, fSeed);\n\t\tfSeed += 1.234;\n\t}\n\t\n\tgl_FragColor = vec4(sqrt(vResult),1.0);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect30",(function(){var n="\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;  \n        \n        #define USE_LIGHT 0\n\n        mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64);\n\n        float hash(float n)\n        {\n            return fract(sin(n) * 43758.5453);\n        }\n\n        ///\n        /// Noise function\n        ///\n        float noise(in vec3 x)\n        {\n            vec3 p = floor(x);\n            vec3 f = fract(x);\n            \n            f = f * f * (3.0 - 2.0 * f);\n            \n            float n = p.x + p.y * 57.0 + 113.0 * p.z;\n            \n            float res = mix(mix(mix(hash(n +   0.0), hash(n +   1.0), f.x),\n                                mix(hash(n +  57.0), hash(n +  58.0), f.x), f.y),\n                            mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n                                mix(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);\n            return res;\n        }\n\n        ///\n        /// Fractal Brownian motion.\n        ///\n        /// Refer to:\n        /// EN: https://thebookofshaders.com/13/\n        /// JP: https://thebookofshaders.com/13/?lan=jp\n        ///\n        float fbm(vec3 p)\n        {\n            float f;\n            f  = 0.5000 * noise(p); p = m * p * 2.02;\n            f += 0.2500 * noise(p); p = m * p * 2.03;\n            f += 0.1250 * noise(p);\n            return f;\n        }\n\n        //////////////////////////////////////////////////\n\n        ///\n        /// Sphere distance function.\n        ///\n        /// But this function return inverse value.\n        /// Normal dist function is like below.\n        /// \n        /// return length(pos) - 0.1;\n        ///\n        /// Because this function is used for density.\n        ///\n        float scene(in vec3 pos)\n        {\n            return 0.1 - length(pos) * 0.05 + fbm(pos * 0.3);\n        }\n\n        ///\n        /// Get normal of the cloud.\n        ///\n        vec3 getNormal(in vec3 p)\n        {\n            const float e = 0.01;\n            return normalize(vec3(scene(vec3(p.x + e, p.y, p.z)) - scene(vec3(p.x - e, p.y, p.z)),\n                                scene(vec3(p.x, p.y + e, p.z)) - scene(vec3(p.x, p.y - e, p.z)),\n                                scene(vec3(p.x, p.y, p.z + e)) - scene(vec3(p.x, p.y, p.z - e))));\n        }\n\n        ///\n        /// Create a camera pose control matrix.\n        ///\n        mat3 camera(vec3 ro, vec3 ta)\n        {\n            vec3 cw = normalize(ta - ro);\n            vec3 cp = vec3(0.0, 1.0, 0.0);\n            vec3 cu = cross(cw, cp);\n            vec3 cv = cross(cu, cw);\n            return mat3(cu, cv, cw);\n        }\n \n        void main(void) { \n            vec2 uv = (vUv - 0.5) * 3.0;\n            vec2 mo = vec2(iTime * 0.1, cos(iTime * 0.25) * 3.0);\n    \n            // Camera\n            float camDist = 25.0;\n            \n            // target\n            vec3 ta = vec3(0.0, 1.0, 0.0);\n            \n            // Ray origin\n            //vec3 ori = vec3(sin(iTime) * camDist, 0, cos(iTime) * camDist);\n            vec3 ro = camDist * normalize(vec3(cos(2.75 - 3.0 * mo.x), 0.7 - 1.0 * (mo.y - 1.0), sin(2.75 - 3.0 * mo.x)));\n            \n            float targetDepth = 1.3;\n            \n            // Camera pose.\n            mat3 c = camera(ro, ta);\n            vec3 dir = c * normalize(vec3(uv, targetDepth));\n            \n            // For raymarching const values.\n            const int sampleCount = 64;\n            const int sampleLightCount = 6;\n            const float eps = 0.01;\n            \n            // Raymarching step settings.\n            float zMax = 40.0;\n            float zstep = zMax / float(sampleCount);\n            \n            float zMaxl = 20.0;\n            float zstepl = zMaxl / float(sampleLightCount);\n            \n            // Easy access to the ray origin\n            vec3 p = ro;\n            \n            // Transmittance\n            float T = 1.0;\n            \n            // Substantially transparency parameter.\n            float absorption = 100.0;\n            \n            // Light Direction\n            vec3 sun_direction = normalize(vec3(1.0, 0.0, 0.0));\n            \n            // Result of culcration\n            vec4 color = vec4(0.0);\n            \n            for (int i = 0; i < sampleCount; i++)\n            {\n                // Using distance function for density.\n                // So the function not normal value.\n                // Please check it out on the function comment.\n                float density = scene(p);\n                \n                // The density over 0.0 then start cloud ray marching.\n                // Why? because the function will return negative value normally.\n                // But if ray is into the cloud, the function will return positive value.\n                if (density > 0.0)\n                {\n                    // Let's start cloud ray marching!\n                    \n                    // why density sub by sampleCount?\n                    // This mean integral for each sampling points.\n                    float tmp = density / float(sampleCount);\n                    \n                    T *= 1.0 - (tmp * absorption);\n                    \n                    // Return if transmittance under 0.01. \n                    // Because the ray is almost absorbed.\n                    if (T <= 0.01)\n                    {\n                        break;\n                    }\n                    \n                    #if USE_LIGHT == 1\n                    // Light scattering\n                    \n                    // Transmittance for Light\n                    float Tl = 1.0;\n                    \n                    // Start light scattering with raymarching.\n                    \n                    // Raymarching position for the light.\n                    vec3 lp = p;\n                    \n                    // Iteration of sampling light.\n                    for (int j = 0; j < sampleLightCount; j++)\n                    {\n                        float densityLight = scene(lp);\n                        \n                        // If densityLight is over 0.0, the ray is stil in the cloud.\n                        if (densityLight > 0.0)\n                        {\n                            float tmpl = densityLight / float(sampleCount);\n                            Tl *= 1.0 - (tmpl * absorption);\n                        }\n                        \n                        if (Tl <= 0.01)\n                        {\n                            break;\n                        }\n                        \n                        // Step to next position.\n                        lp += sun_direction * zstepl;\n                    }\n                    #endif\n                    \n                    // Add ambient + light scattering color\n                    float opaity = 50.0;\n                    float k = opaity * tmp * T;\n                    vec4 cloudColor = vec4(1.0);\n                    vec4 col1 = cloudColor * k;\n                    \n                    #if USE_LIGHT == 1\n                    float opacityl = 30.0;\n                    float kl = opacityl * tmp * T * Tl;\n                    vec4 lightColor = vec4(1.0, 0.7, 0.9, 1.0);\n                    vec4 col2 = lightColor * kl;\n                    #else\n                    vec4 col2 = vec4(0.0);\n                    #endif\n                    \n                    color += col1 + col2;\n                }\n                \n                p += dir * zstep;\n            }\n            \n            vec3 bg = mix(vec3(0.3, 0.1, 0.8), vec3(0.7, 0.7, 1.0), 1.0 - (uv.y + 1.0) * 0.5);\n            color.rgb += bg;\n            gl_FragColor = color;\n        }\n\t\t";return n})),Object(i["a"])(o,"effect31",(function(){var n="\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;  \n        \n        #define TAU 6.28318530718\n\n        #define TILING_FACTOR 1.0\n        #define MAX_ITER 8\n\n\n        float waterHighlight(vec2 p, float time, float foaminess)\n        {\n            vec2 i = vec2(p);\n            float c = 0.0;\n            float foaminess_factor = mix(1.0, 6.0, foaminess);\n            float inten = .005 * foaminess_factor;\n\n            for (int n = 0; n < MAX_ITER; n++) \n            {\n                float t = time * (1.0 - (3.5 / float(n+1)));\n                i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n                c += 1.0/length(vec2(p.x / (sin(i.x+t)),p.y / (cos(i.y+t))));\n            }\n            c = 0.2 + c / (inten * float(MAX_ITER));\n            c = 1.17-pow(c, 1.4);\n            c = pow(abs(c), 8.0);\n            return c / sqrt(foaminess_factor);\n        }\n \n        void main(void) { \n            vec2 uv = vUv;\n            float time = iTime * 0.1+23.0;\n            // vec2 uv = fragCoord.xy / iResolution.xy;\n            vec2 uv_square = vec2(uv.x * iResolution.x / iResolution.y, uv.y);\n            float dist_center = pow(2.0*length(uv - 0.5), 2.0);\n            \n            float foaminess = smoothstep(0.4, 1.8, dist_center);\n            float clearness = 0.1 + 0.9*smoothstep(0.1, 0.5, dist_center);\n            \n            vec2 p = mod(uv_square*TAU*TILING_FACTOR, TAU)-250.0;\n            \n            float c = waterHighlight(p, time, foaminess);\n            \n            vec3 water_color = vec3(0.0, 0.35, 0.5);\n            vec3 color = vec3(c);\n            color = clamp(color + water_color, 0.0, 1.0);\n            \n            color = mix(water_color, color, clearness);\n\n            gl_FragColor = vec4(color, 1.0);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect32",(function(){var n="\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;  \n        \n        float time;\n\n        //-----------------------------------------------------------------------------\n        float hash( float n )\n        {\n            return fract(sin(n)*43758.5453);\n        }\n\n        //-----------------------------------------------------------------------------\n        float noise( in vec2 x )\n        {\n            vec2 p = floor(x);\n            vec2 f = fract(x);\n\n            f = f*f*(3.0-2.0*f);\n\n            float n = p.x + p.y*57.0;\n\n            float res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                            mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n\n            return res;\n        }\n\n        //-----------------------------------------------------------------------------\n        float SmokeParticle(vec2 loc, vec2 pos, float size, float rnd)\n        {\n            loc = loc-pos;\n            float d = dot(loc, loc)/size;\n            // Outside the circle? No influence...\n            if (d > 1.0) return 0.0;\n\n            // Rotate the particles...\n            float r= time*rnd*1.85;\n            float si = sin(r);\n            float co = cos(r);\n            // Grab the rotated noise decreasing resolution due to Y position.\n            // Also used 'rnd' as an additional noise changer.\n            d = noise(hash(rnd*828.0)*83.1+mat2(co, si, -si, co)*loc.xy*2./(pos.y*.16)) * pow((1.-d), 3.)*.7;\n            return d;\n        }\n\n        //-----------------------------------------------------------------------------\n        float RockParticle(vec2 loc, vec2 pos, float size, float rnd)\n        {\n            loc = loc-pos;\n            float d = dot(loc, loc)/size;\n            // Outside the circle? No influence...\n            if (d > 1.0) return 0.0;\n            float r= time*1.5 * (rnd);\n            float si = sin(r);\n            float co = cos(r);\n            d = noise((rnd*38.0)*83.1+mat2(co, si, -si, co)*loc*143.0) * pow(1.0-d, 15.25);\n            return pow(d, 2.)*5.;\n            \n        }\n \n        void main(void) {\n            time = (iTime+1.);\n            vec2 uv = vUv * 2.0 - 1.1;\n            uv.x *= iResolution.x/iResolution.y;\n            vec3 col = mix(vec3(.95, 1., 1.0), vec3(.75, .89, 1.0), uv.y+.75);\n\n            // Position...\t\n            uv = uv + vec2(0.1,1.1);\n            // Loop through rock particles...\n            for (float i = 0.0; i < 40.0; i+=1.0)\n            {\n                float t = time*1.3+i*(2.+hash(i*-1239.)*2.0);\n                float sm = mod(t, 9.3)*.8;\n                float rnd = floor(t / 9.3);\n                vec2 pos = vec2(0.0, sm) *.5;\n                pos.x += (hash(i*33.0+rnd)-.5)*.2 * sm*2.13;\n                // Mechanics... a butchered d = vt + (1/2)at^2    ;)\n                pos.y += (.1 - (.075+hash(i*30.0+rnd*36.7)*.15)*(sm*sm)*.8);\n                float d = RockParticle(pos, uv, .01*hash(i*1332.23)+.001, (hash(-i*42.13*rnd)-.5)*15.0);\n                if (d <= 0.0) continue;\n                float c = max(.3+abs(hash(i*11340.0))*.8+(1.0-sm*.5), 0.0);\n                col = mix(col, vec3(c,c*.2, 0.0), min(d, 1.));\n            }\n\n            // Loop through smoke particles...\n            for (float i = 0.0; i < 120.0; i+=1.0)\n            {\n                // Lots of magic numbers? Yerp....\n                float t=  time+i*(2.+hash(i*-1239.)*2.0);\n                float sm = mod(t, 8.6) *.5;\n                float rnd = floor(t / 8.6);\n\n                vec2 pos = vec2(0.0, sm) *.5;\n                pos.x += (hash(i)-.5)*.2 * uv.y*5.13;\n                float d = SmokeParticle(pos, uv, .03*hash(i*1332.23+rnd)+.001+sm*0.03, hash(i*rnd*2242.13)-0.5);\n                if (d <= 0.0) continue;\n                d = d* max((3.0-(hash(i*127.0)*1.5) - sm*.63), 0.0);\n                float c = abs(hash(i*4.4));\n                // Black/rusty smoke...\n                col = mix(col, vec3(c*.3+.05, c*.3, c*.25), min(d, 1.0));\n                // Lava gush...\n                col = mix(col, vec3(.52, .25, 0.0), max((d-1.05)*8.0, 0.0));\n            }\n            uv = vUv;\n            col *= pow( 45.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), .08 );\n            gl_FragColor = vec4( col, 1.0 );\n        }\n\t\t";return n})),Object(i["a"])(o,"effect33",(function(){var n="\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;  \n        \n        #define POINT_COUNT 8\n\nvec2 points[POINT_COUNT];\nconst float speed = -0.5;\nconst float len = 0.25;\nconst float scale = 0.012;\nfloat intensity = 1.3;\nfloat radius = 0.015;\n\n//https://www.shadertoy.com/view/MlKcDD\n//Signed distance to a quadratic bezier\nfloat sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C){    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n\n    if(h >= 0.0){ \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = uv.x + uv.y - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 1 root\n        vec2 qos = d + (c + b*t)*t;\n        res = length(qos);\n    }else{\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 3 roots\n        vec2 qos = d + (c + b*t.x)*t.x;\n        float dis = dot(qos,qos);\n        \n        res = dis;\n\n        qos = d + (c + b*t.y)*t.y;\n        dis = dot(qos,qos);\n        res = min(res,dis);\n\n        qos = d + (c + b*t.z)*t.z;\n        dis = dot(qos,qos);\n        res = min(res,dis);\n\n        res = sqrt( res );\n    }\n    \n    return res;\n}\n\n\n//http://mathworld.wolfram.com/HeartCurve.html\nvec2 getHeartPosition(float t){\n    return vec2(16.0 * sin(t) * sin(t) * sin(t),\n                -(13.0 * cos(t) - 5.0 * cos(2.0*t)\n                - 2.0 * cos(3.0*t) - cos(4.0*t)));\n}\n\n//https://www.shadertoy.com/view/3s3GDn\nfloat getGlow(float dist, float radius, float intensity){\n    return pow(radius/dist, intensity);\n}\n\nfloat getSegment(float t, vec2 pos, float offset){\n\tfor(int i = 0; i < POINT_COUNT; i++){\n        points[i] = getHeartPosition(offset + float(i)*len + fract(speed * t) * 6.28);\n    }\n    \n    vec2 c = (points[0] + points[1]) / 2.0;\n    vec2 c_prev;\n\tfloat dist = 10000.0;\n    \n    for(int i = 0; i < POINT_COUNT-1; i++){\n        //https://tinyurl.com/y2htbwkm\n        c_prev = c;\n        c = (points[i] + points[i+1]) / 2.0;\n        dist = min(dist, sdBezier(pos, scale * c_prev, scale * points[i], scale * c));\n    }\n    return max(0.0, dist);\n}\n \n        void main(void) {\n            vec2 uv = vUv;\n    float widthHeightRatio = iResolution.x/iResolution.y;\n    vec2 centre = vec2(0.5, 0.5);\n    vec2 pos = centre - uv;\n    pos.y /= widthHeightRatio;\n    //Shift upwards to centre heart\n    pos.y += 0.03;\n\t\n    float t = iTime;\n    \n    //Get first segment\n    float dist = getSegment(t, pos, 0.0);\n    float glow = getGlow(dist, radius, intensity);\n    \n    vec3 col = vec3(0.0);\n    \n    //White core\n    col += 10.0*vec3(smoothstep(0.006, 0.003, dist));\n    //Pink glow\n    col += glow * vec3(1.0,0.05,0.3);\n    \n    //Get second segment\n    dist = getSegment(t, pos, 3.4);\n    glow = getGlow(dist, radius, intensity);\n    \n    //White core\n    col += 10.0*vec3(smoothstep(0.006, 0.003, dist));\n    //Blue glow\n    col += glow * vec3(0.1,0.4,1.0);\n        \n    //Tone mapping\n    col = 1.0 - exp(-col);\n    \n    //Gamma\n    col = pow(col, vec3(0.4545));\n\n    //Output to screen\n    gl_FragColor = vec4(col,1.0);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect34",(function(){var n='\n\t\tuniform float iTime; \n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;  \n        \n        float hash(float x)\n{\n\treturn fract(21654.6512 * sin(385.51 * x));\n}\n\nfloat hash(vec2 p)\n{\n\treturn fract(21654.65155 * sin(35.51 * p.x + 45.51 * p.y));\n}\n\nfloat lhash(float x, float y)\n{\n\tfloat h = 0.0;\n\t\n\tfor(int i = 0;i < 5;i++)\n\t{\n\t\th += (fract(21654.65155 * float(i) * sin(35.51 * x + 45.51 * float(i) * y * (5.0 / float(i))))* 2.0 - 1.0) / 10.0;\n\t}\n\treturn h / 5.0 + 0.02;\n\treturn (fract(21654.65155 * sin(35.51 * x + 45.51 * y))* 2.0 - 1.0) / 20.0;\n}\n\nfloat noise(vec2 p)\n{\n\tvec2 fl = floor(p);\n\tvec2 fr = fract(p);\n\t\n\tfr.x = smoothstep(0.0,1.0,fr.x);\n\tfr.y = smoothstep(0.0,1.0,fr.y);\n\t\n\tfloat a = mix(hash(fl + vec2(0.0,0.0)), hash(fl + vec2(1.0,0.0)),fr.x);\n\tfloat b = mix(hash(fl + vec2(0.0,1.0)), hash(fl + vec2(1.0,1.0)),fr.x);\n\t\n\treturn mix(a,b,fr.y);\n}\n\n//Fractal Brownian Motion \nfloat fbm(vec2 p)\n{\n\tfloat v = 0.0, f = 1.0, a = 0.5;\n\tfor(int i = 0;i < 5; i++)\n\t{\n\t\tv += noise(p * f) * a;\n\t\tf *= 2.0;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n \n        void main(void) {\n            float time = iTime*1.;\n            vec2 uv = (vUv - 0.5) * 2.0;\n            uv = uv*2.0 -1.0;\n            uv.x *= iResolution.x / iResolution.y;\t\n        \n            float p = fbm(vec2(noise(uv+time/2.5),noise(uv*2.+cos(time/2.)/2.)));\n            //uncomment for more plasma/lighting/plastic effect..\n            //p = (1. - abs(p * 2.0 - 1.0))*.8;\n        \n            vec3 col = pow(vec3(p),vec3(0.3))-0.4;\n            col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.2,pow(1.0 / 2.0,0.5) - uv.y/40.0) );\n            float s = smoothstep(.35,.6,col.x);\n            float s2 = smoothstep(.47,.6,col.x);\n            float s3 = smoothstep(.51,.6,col.x);\n            //multiply by the inverse to get the "smoky" effect, first attempt\n            col*=vec3(1.3,.1,0.1)*s; //add red\n            col+=vec3(0.3,0.4,.1)*s2; //add orange\n            col+=vec3(1.,4.,.1)*s3; //add yellow\n            //made it more bright\n            col*=1.5;\n            gl_FragColor = vec4(col,col.r*.3);\n            gl_FragColor.rgb += 0.05;\n        }\n\t\t';return n})),Object(i["a"])(o,"effect35",(function(){var n="\n\t\tuniform float iTime; \n        varying vec2 vUv;  \n        uniform vec3 color;\n        vec3 hsb2rgb(in vec3 c)\n        {\n            vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                    6.0)-3.0)-1.0,\n            0.0,\n            1.0 );\n            rgb = rgb*rgb*(3.0-2.0*rgb);\n            return c.z * mix( vec3(1.0), rgb, c.y);\n        }\n\n        void main(void) {\n            // float time = iTime*1.;\n            vec2 uv = (vUv - 0.5) * 2.0;\n            float r = length(uv) * 1.8;\n            vec3 opacity = hsb2rgb(vec3(0.24, 0.7, 0.4));\n            \n            float a = pow(r, 2.0);\n            float b = sin(r * 0.8 - 1.6);\n            float c = sin(r - 0.010);\n            float s = sin(a - iTime * 3.0 + b) * r;\n            \n            opacity *= abs(1.0 / (s * 10.8)) - 0.01;\n            gl_FragColor = vec4(color, opacity.x);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect35_1",(function(){var n="\n\t\tuniform float iTime; \n        varying vec2 vUv;  \n        uniform vec3 color; \n\n        void main(void) {\n            float time = sin(fract(iTime / 2.5)) * 0.8 - 0.3;\n            float d = length(vUv - vec2(0.5));\n            vec3 f = (smoothstep(0.125, 0.12, d))*color;\n            if(d < 0.295+time) {\n                f += (smoothstep(0.0+time, 0.295+time, d))*0.6*color; \n            }else if(d < 0.3+time) {\n                f += (smoothstep(0.3+time, 0.295+time, d))*0.6*color; \n            }\n            if(d < 0.5+time ) {\n                f += (smoothstep(0.0+time, 0.5+time, d))*0.08*color; \n            }\n            vec3 colors = mix(f, color, color);\n            gl_FragColor = vec4(colors, f.r+f.g+f.b);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect36",(function(){var n="\n\t\tuniform float iTime; \n\t\tvarying vec2 vUv;  \n        uniform sampler2D iChannel1;\n\n        float hash( in vec2 p )  {\n            return fract(sin(p.x*15.32+p.y*35.78) * 43758.23);\n        }\n\n        vec2 hash2(vec2 p) {\n            return vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-.5;\n        }\n\n\n        vec2 add = vec2(1.0, 0.0);\n\n        vec2 noise2(vec2 x) {\n            vec2 p = floor(x);\n            vec2 f = fract(x);\n            f = f*f*(3.0-2.0*f);\n            \n            vec2 res = mix(mix( hash2(p),          hash2(p + add.xy),f.x),\n                            mix( hash2(p + add.yx), hash2(p + add.xx),f.x),f.y);\n            return res;\n        }\n\n        // Simplex Noise from IQ\n        vec2 noise2b( in vec2 p ) {\n            const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n            const float K2 = 0.211324865; // (3-sqrt(3))/6;\n            p /=2.;\n            vec2 i = floor( p + (p.x+p.y)*K1 );\n            \n            vec2 a = p - i + (i.x+i.y)*K2;\n            vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n            vec2 b = a - o + K2;\n            vec2 c = a - 1.0 + 2.0*K2;\n\n            vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n            vec3 nx = h*h*h*h*vec3( dot(a,hash2(i+0.0)), dot(b,hash2(i+o)), dot(c,hash2(i+1.0)));\n            vec3 ny = h*h*h*h*vec3( dot(a,hash2(i+4.5)), dot(b,hash2(i+o+4.5)), dot(c,hash2(i+1.0+4.5)));\n\n            return vec2(dot( nx, vec3(70.0) ),dot( ny, vec3(70.0) ));\n            \n        }\n\n\n        mat2 m2;\n\n        vec2 fbm2(vec2 x) {\n            vec2 r = vec2(0.0);\n            float a = 1.;\n            \n            for (int i = 0; i < 6; i++) {\n                r += m2*noise2b(x+r)*a; \n                x +=.3*r+.4;\n            }     \n            return r;\n        }\n\n\n        vec2 water(vec2 x) {\n            x=fbm2(x);\n            x=abs(x)/dot(x,x)-1.;\n            return abs(x)/dot(x,x)-1.;\n        }\n \n        void main(void) {\n            vec2 uv = (vUv - 0.5) * 30.0;\n            float t = 0.5 * iTime;\n            float st = sin(t), ct = cos(t);\n            m2 = mat2(ct, st, -st, ct);\n            vec2 p = water(uv + 0.2* iTime) + 2.;\n            float c = length(p) / 7.;\n            c = clamp(pow(c, 3.), 0., 1.);\n            vec3 col = texture2D(iChannel1, uv / 20. + p / 45.).rgb;    \n            col = vec3( 1., 1., 1.) * c + col;\n            gl_FragColor = vec4(col, 1.0);\n        }\n\t\t";return n})),Object(i["a"])(o,"effect37",(function(){var n="\n        varying vec3 vPosition;\n        uniform float iTime;\n        varying vec2 vUv;\n        void main(void) {\n            vec2 center = vec2(0.5,0.5);\n\n            vec2 pos = mod(vUv * 5.0, 1.0);\n\n            float d = distance(pos, center);\n\n            float l = step(0.25 + sin(iTime + vUv.x * 2.0) * 0.25, d);\n            l = 1.0 - l;\n            gl_FragColor = vec4(l, 0.5, 1.0, 1.0);\n        }\n        ";return n})),Object(i["a"])(o,"effect38",(function(){var n="\n        varying vec3 vPosition;\n        uniform float iTime;\n        uniform vec3 color;\n        uniform vec3 color1;\n        varying vec2 vUv;\n        void main(void) {\n\n            float d = mod( vUv.y * 5.0 - iTime, 1.0);\n\n            vec3 c = d > 0.5 ? vec3(color1) : vec3(color);\n\n            gl_FragColor = vec4(c, pow(d, 0.4));\n        }\n        ";return n})),Object(i["a"])(o,"effect39",(function(){var n="\n        varying vec3 vPosition;\n        uniform float iTime;\n        uniform vec3 color;\n        varying vec2 vUv;\n        void main() {\n            \n            float d = mod(vUv.y * 1.0 - iTime, 1.0);\n\n            gl_FragColor = vec4(color, pow(d, 3.0));\n        }\n        ";return n})),Object(i["a"])(o,"effect40",(function(){var n="\n        uniform float iTime;\n        uniform vec3 color;\n        varying vec2 vUv;\n\n        void main()\n        {\n            // Normalized pixel coordinates (from 0 to 1)\n            vec2 pos = vUv;\n            pos -= 0.5;\n            pos *= 20.;\n            float a = cos(pos.x+iTime*3.0)*5.0;\n            float f = (1.0 - smoothstep(pos.y, pos.y + 0.1, a) - (1.0 - smoothstep( pos.y, pos.y+0.1, a+0.2)));\n            gl_FragColor = vec4(f*color, f);\n        }\n        ";return n})),Object(i["a"])(o,"effect41",(function(){var n="\n        uniform float iTime;\n        uniform vec3 color;\n        varying vec2 vUv;\n\n        void main()\n        {\n            float f = 0.0;\n            float d = length(vUv - vec2(0.5));\n\n            f += smoothstep(0.02, 0.005, d);\n\n            f += 1.0 - (smoothstep(0.49, 0.5, d) + smoothstep(0.49, 0.48, d));\n\n            f += 1.0 - ((smoothstep(0.31, 0.32, d) + smoothstep(0.31, 0.30, d)));\n\n            f += 1.0 - ((smoothstep(0.11, 0.12, d) + smoothstep(0.11, 0.10, d)));\n\n            f = smoothstep(0.0, 0.8, f);\n\n            f += fract(vUv.x - vUv.y - iTime) > 0.01 ? 0.0 : 1.0; \n\n            gl_FragColor = vec4(f*color, f);  \n        }\n        ";return n})),Object(i["a"])(o,"effect42",(function(){var n="\n        uniform float iTime;\n        uniform vec3 color;\n        varying vec2 vUv;\n\n        void main()\n        {\n            float d = mod(-vUv.y, 1.0);\n\n            gl_FragColor = vec4(color, pow(d, 2.0));  \n        }\n        ";return n})),Object(i["a"])(o,"effect43",(function(){var n="\n        #define SMOOTH(r,R) (1.0-smoothstep(R-1.0,R+1.0, r))\n        #define M_PI 3.1415926535897932384626433832795\n\n        uniform vec3 color;\n        uniform vec3 color1;\n\n        float PI = 3.1415926;\n\t\tuniform float iTime;\n\t\tuniform vec2 iResolution; \n\t\tvarying vec2 vUv;\n        \n        \n        float movingLine(vec2 uv, vec2 center, float radius)\n        {\n            //angle of the line\n            float theta0 = 90.0 * iTime * 2.0;\n            vec2 d = uv - center;\n            float r = sqrt( dot( d, d ) );\n            if(r<radius)\n            {\n                //compute the distance to the line theta=theta0\n                vec2 p = radius*vec2(cos(theta0*M_PI/180.0),\n                                    -sin(theta0*M_PI/180.0));\n                float l = length( d - p*clamp( dot(d,p)/dot(p,p), 0.0, 1.0) );\n                d = normalize(d);\n                //compute gradient based on angle difference to theta0\n                float theta = mod(180.0*atan(d.y,d.x)/M_PI+theta0,360.0);\n                float gradient = clamp(1.0-theta/360.0,0.0,1.0);\n                return SMOOTH(l,.6) + 0.8*gradient;\n            }\n            else return 0.0;\n        }\n\n        float circle(vec2 uv, vec2 center, float radius, float width)\n        {\n            float r = length(uv - center);\n            return SMOOTH(r-width/2.0,radius)-SMOOTH(r+width/2.0,radius);\n        }\n        \n      \n\t\tvoid main() { \n            vec2 _uv = vec2(vUv.x * iResolution.x, vUv.y * iResolution.y);\n            vec3 finalColor;\n            vec2 uv = _uv;\n            \n            vec2 c = vec2(iResolution.x / 2.0, iResolution.y / 2.0);\n            finalColor += movingLine(uv, c, 300.0) * color;\n            // finalColor += (circle(uv, c, 200.0, 2.0) ) * color1;\n\n\t\t\tgl_FragColor = vec4( finalColor, 1.0);\n\t\t}\n\t\t";return n})),Object(i["a"])(o,"effect44",(function(){var n="\n        const float PI = 3.14159265359;\n        const float TWO_PI = 6.28318530718;\n        const int N = 3;\t\t\t\t// triangle polygons please\n        const float r0 = 0.01;\t\t\t// size of centre circle\n        const float r_blue = 0.025;\t\t// size of blue radar blips\n        const float r_red = 0.015;\t\t// size of red radar blips\n        const float edge = 0.95;\t\t// overall size\n        const float offset = 0.05;\n        uniform float iTime;\n        uniform sampler2D map;\n        varying vec2 vUv;\n        float plot(const vec2 st, const float pct, const float width)\n            {\n                return smoothstep(pct - width, pct, st.y) -\n                       smoothstep(pct, pct + width, st.y);\n            }\n        \n        float drawPolygon(const vec2 polygonCenter, const int N, const float radius, vec2 pos)\n            {\n                pos = pos - polygonCenter;\n                float d = 0.0;\n                float a = atan(pos.x, pos.y);\n                float r = TWO_PI / float(N);\n                d = cos(floor(0.5 + a / r)*r - a)*length(pos);\n                return (1.0 - smoothstep(radius, radius + radius/10.0, d));\n            }\n        \n        float gradations(const float a, const float gradNum, const float outRad, const float tickLen, const float tickWidth, const float r, const float move)\n            {\n                float f = step(0.0, cos((a + move)*gradNum) - tickWidth)*tickLen + (outRad - tickLen);\n                return 1.0 - step(f, r) * 1.0 - step(r, outRad - tickLen);\n            }\n        \n        void main(  )\n        {\n            // Normalized pixel coordinates (from 0 to 1)\n            vec2 uv = vUv;\n            vec2 pos = uv.xy - vec2(0.5, 0.5) ; // center what being drawn\n           \n               vec4 grndSpd = vec4(0.0, iTime/5.0, 0.0, 0.0);\n            vec4 mapcol = texture2D(map,uv) * vec4 (0.0, 0.85, 0.0, 1.0);\n          \n            vec3 color = vec3(0.0, 0.0, 0.0);\n        \n            float r = length(pos) * 2.0;\n            float a = atan(pos.y, pos.x); // angle of pixel\n            float an = PI - mod(iTime/ 1.0, TWO_PI); // angle of radar sweep\n            float blipSpd = 3.0; // Blip / Trace speed\n            vec2 translate1 = vec2(cos(iTime/ blipSpd), sin(iTime/ blipSpd));\n            vec2 translate2 = vec2(sin(iTime/ blipSpd), cos(iTime/ blipSpd));\n            vec2 left1 = translate1 * 0.35;\n            vec2 right1 = -translate1 * 0.30;\n            vec2 left2 = translate2 * 0.15;\n            vec2 right2 = -translate2 * 0.25;\n            \n        // Radar Sweep\n               float sn = step(PI/2.0, an) * step(-PI/2.0, (a + an)) * step(r, edge) * (1.0 - 0.55 * (a + (TWO_PI) - an));\n            float sw = step(an, a) * step(r, edge);\n            float s_blade = sw * (1.0 - (a - an) * 20.0);\n            float s = sw * (1.0 - 0.55 * (a - an));\n            s = max(sn,s);\n            float se = step(r, edge - 0.05);\n           \n        // Center point\n            float s1 = smoothstep(edge - 0.00, edge + 0.01, r)* smoothstep(edge + 0.02, edge + 0.01, r);   \n           \n        // Circular concentric rings\n            float s0 = 1.0 - smoothstep(r0 / 2.0, r0, length(pos));\n            float smb = (1.0 - smoothstep(0.2, 0.2 + 0.01, length(pos))) * (1.0 - smoothstep(0.2 +0.01, 0.2, length(pos)));\n            float smr = (1.0 - smoothstep(0.3, 0.3 + 0.01, length(pos))) * (1.0 - smoothstep(0.3 +0.01, 0.3, length(pos)));\n            \n        // Circular concentric gradations\n            float gradNum = 120.0;\n            float tickWidth = 0.9;\n            const float tickLen = 0.04;\n            float outRad = edge;\n            float move = 0.0;\n            float sm = 0.75*gradations(a, gradNum, outRad, tickLen, tickWidth, r, move);   \n           \n            gradNum = 36.0;\n            tickWidth = 0.95;\n            outRad = 0.6;\n            move = sin(iTime/10.0);\n            smr += 0.5*gradations(a, gradNum, outRad, tickLen, tickWidth, r, move);\n        \n            outRad = 0.4;\n            move = cos(iTime/10.0);\n            smb += 0.5*gradations(a, gradNum, outRad, tickLen, tickWidth, r, move);\n        \n        // Radial spoke gradations \n            float sr = plot(pos, pos.x, 0.003) * step(r, edge - 0.06);\n            sr += plot(vec2(0.0, 0.0), pos.x, 0.002) * step(r, edge - 0.06);\n            sr += plot(vec2(0.0, 0.0), pos.y, 0.003) * step(r, edge - 0.06);\n            sr += plot(-pos, pos.x, 0.003) * step(r, edge - 0.06);\n            sr *= 0.75;\n        \n        // Blue circular radar blip traces\n            vec2 st_trace1 = left2;\n            float s_trace1 = s * (1.0 - smoothstep(r_blue / 10.0, r_blue, length(pos - st_trace1)));\n            s_trace1 += s * (1.0 - smoothstep(r_blue / 10.0, r_blue, length(pos - st_trace1 + vec2(+offset, +offset))));\n            s_trace1 += s * (1.0 - smoothstep(r_blue / 10.0, r_blue, length(pos - st_trace1 + vec2(+2.0 *offset, +2.0 *offset))));\n        \n            vec2 st_trace2 = right1;\n            float s_trace2 = s * (1.0 - smoothstep(r_blue / 10.0, r_blue, length(pos - st_trace2)));\n        \n        // Red Trianglular radar flight blip trace \n            vec2 st_trace3 = left1;\n            float st1 = s * (drawPolygon(st_trace3, N, r_red , pos));\n            st1 += s * (drawPolygon(st_trace3 + vec2(-offset, -offset), N, r_red, pos));\n            st1 += s * (drawPolygon(st_trace3 + vec2(+offset, -offset), N, r_red, pos));\n        \n            vec2 st_trace4 = right2;\n            float st2 = s * (drawPolygon(st_trace4, N, r_red, pos));  \n            \n        // Lets add all the bits together and send them to screen\n            float s_grn = max(s * mapcol.y, s_blade);\n            s_grn = max(s_grn, (s0 +  sr + sm));\n            s_grn += s1 / 1.5  + smb + smr;\n        \n            float s_red = st1*2.0 + st2*2.0 + smr;\n                \n            float s_blue = max(s_trace1 + s_trace2, s_blade) + smb;\n        \n            if (s_trace1 > 0.0 || s_trace2 > 0.0) { s_blue = max(s, s_blue); s_grn = max(s_grn, s_blue); }\n        \n            color += vec3(s_red , s_grn, s_blue);   \n            \n            vec4 texColor = mapcol * s;\n            \n            // Output to screen   \n            gl_FragColor = vec4(color, pow(color.r + color.g+ color.b, 2.0));//Set the screen pixel to that color\n        \n        }\n        ";return n})),Object(i["a"])(o,"effect45",(function(){var n="\n        uniform float time;\n        uniform vec3 color;\n        uniform vec3 color1;\n        varying vec3 vPosition;\n        void main() {\n\n            float indexMix = (vPosition.z + 0.003 ) /0.01;\n            \n            vec3 lightColor = mix(color1, color, indexMix);\n\n            gl_FragColor = vec4(lightColor, 1.0);\n        }\n        ";return n})),Object(i["a"])(o,"effect46",(function(){var n="\n        uniform float time;\n        uniform vec3 color;\n        uniform vec3 color1;\n        varying vec2 vUv;\n        uniform sampler2D map;\n        void main() {\n            vec4 texture = texture2D(map,vUv);\n            gl_FragColor = texture;\n        }\n        ";return n})),Object(i["a"])(o,"effect47",(function(){var n="\n            uniform float iTime;\n            varying vec2 vUv;\n\n            vec2 hash( vec2 p )\n            {\n                p = vec2( dot(p,vec2(127.1,311.7)),\n                        dot(p,vec2(269.5,183.3)) );\n                return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n            }\n\n            float noise( in vec2 p )\n            {\n                const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n                const float K2 = 0.211324865; // (3-sqrt(3))/6;\n                \n                vec2 i = floor( p + (p.x+p.y)*K1 );\n                \n                vec2 a = p - i + (i.x+i.y)*K2;\n                vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n                vec2 b = a - o + K2;\n                vec2 c = a - 1.0 + 2.0*K2;\n                \n                vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n                \n                vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n                \n                return dot( n, vec3(70.0) );\n            }\n\n            float fbm(vec2 uv)\n            {\n                float f;\n                mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n                f  = 0.5000*noise( uv ); uv = m*uv;\n                f += 0.2500*noise( uv ); uv = m*uv;\n                f += 0.1250*noise( uv ); uv = m*uv;\n                f += 0.0625*noise( uv ); uv = m*uv;\n                f = 0.5 + 0.5*f;\n                return f;\n            }\n\n            // no defines, standard redish flames\n            //#define BLUE_FLAME\n            //#define GREEN_FLAME\n\n            void main( )\n            {\n                vec2 uv = vUv;\n                vec2 q = uv;\n                q.x *= 1.;\n                q.y *= 1.;\n                float strength = floor(q.x+1.);\n                float T3 = max(3., 1.25*strength)*iTime;\n                q.x = mod(q.x,1.)-0.5;\n                q.y -= 0.25;\n                float n = fbm(strength*q - vec2(0,T3));\n                float c = 1. - 16. * pow( max( 0., length(q*vec2(1.8+q.y*1.5,.75) ) - n * max( 0., q.y+.25 ) ),1.2 );\n                float c1 = n * c * (1.5-pow(1.0*uv.y,4.));\n                c1=clamp(c1,0.,1.);\n\n                vec3 col = vec3(1.5*c1, 1.5*c1*c1*c1, c1*c1*c1*c1*c1*c1);\n                \n                #ifdef BLUE_FLAME\n                    col = col.zyx;\n                #endif\n                #ifdef GREEN_FLAME\n                    col = 0.85*col.yxz;\n                #endif\n                \n                float a = c * (1.-pow(uv.y,3.));\n                gl_FragColor = vec4( mix(vec3(0.),col,a), 1.0);\n            }\n        ";return n})),Object(i["a"])(o,"effect48",(function(){var n="\n\n        #define DRAG_MULT 0.048\n        #define ITERATIONS_RAYMARCH 13\n        #define ITERATIONS_NORMAL 48\n        #define WATER_DEPTH 2.1\n        \n        vec3 iMouse = vec3(0.0, 0.0 ,0.0 );\n\t\tuniform vec2 iResolution; \n\n        uniform float iTime;\n        varying vec2 vUv;\n\n        // returns vec2 with wave height in X and its derivative in Y\n        vec2 wavedx(vec2 position, vec2 direction, float speed, float frequency, float timeshift) {\n            float x = dot(direction, position) * frequency + timeshift * speed;\n            float wave = exp(sin(x) - 1.0);\n            float dx = wave * cos(x);\n            return vec2(wave, -dx);\n        }\n\n        float getwaves(vec2 position, int iterations){\n            float iter = 0.0;\n            float phase = 6.0;\n            float speed = 2.0;\n            float weight = 1.0;\n            float w = 0.0;\n            float ws = 0.0;\n            for(int i=0;i<iterations;i++){\n                vec2 p = vec2(sin(iter), cos(iter));\n                vec2 res = wavedx(position, p, speed, phase, iTime);\n                position += normalize(p) * res.y * weight * DRAG_MULT;\n                w += res.x * weight;\n                iter += 12.0;\n                ws += weight;\n                weight = mix(weight, 0.0, 0.2);\n                phase *= 1.18;\n                speed *= 1.07;\n            }\n            return w / ws;\n        }\n\n        float raymarchwater(vec3 camera, vec3 start, vec3 end, float depth){\n            vec3 pos = start;\n            float h = 0.0;\n            float hupper = depth;\n            float hlower = 0.0;\n            vec2 zer = vec2(0.0);\n            vec3 dir = normalize(end - start);\n            for(int i=0;i<318;i++){\n                h = getwaves(pos.xz * 0.1, ITERATIONS_RAYMARCH) * depth - depth;\n                if(h + 0.01 > pos.y) {\n                    return distance(pos, camera);\n                }\n                pos += dir * (pos.y - h);\n            }\n            return -1.0;\n        }\n\n        float H = 0.0;\n        vec3 normal(vec2 pos, float e, float depth){\n            vec2 ex = vec2(e, 0);\n            H = getwaves(pos.xy * 0.1, ITERATIONS_NORMAL) * depth;\n            vec3 a = vec3(pos.x, H, pos.y);\n            return normalize(cross(normalize(a-vec3(pos.x - e, getwaves(pos.xy * 0.1 - ex.xy * 0.1, ITERATIONS_NORMAL) * depth, pos.y)), \n                                normalize(a-vec3(pos.x, getwaves(pos.xy * 0.1 + ex.yx * 0.1, ITERATIONS_NORMAL) * depth, pos.y + e))));\n        }\n        mat3 rotmat(vec3 axis, float angle)\n        {\n            axis = normalize(axis);\n            float s = sin(angle);\n            float c = cos(angle);\n            float oc = 1.0 - c;\n            return mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n            oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n            oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n        }\n\n        vec3 getRay(vec2 uv){\n            vec2 Resolution = iResolution.xy;\n            vec2 Mouse = iMouse.xy / Resolution;\n            uv = (uv * 2.0 - 1.0) * vec2(Resolution.x / Resolution.y, 1.0);\n            vec3 proj = normalize(vec3(uv.x, uv.y, 1.0) + vec3(uv.x, uv.y, -1.0) * pow(length(uv), 2.0) * 0.05);\t\n            if(Resolution.x < 400.0) return proj;\n            vec3 ray = rotmat(vec3(0.0, -1.0, 0.0), 3.0 * (Mouse.x * 2.0 - 1.0)) * rotmat(vec3(1.0, 0.0, 0.0), 1.5 * (Mouse.y * 2.0 - 1.0)) * proj;\n            return ray;\n        }\n\n        float intersectPlane(vec3 origin, vec3 direction, vec3 point, vec3 normal)\n        { \n            return clamp(dot(point - origin, normal) / dot(direction, normal), -1.0, 9991999.0); \n        }\n\n        vec3 getatm(vec3 ray, float roughness){\n            vec3 sharp = mix(vec3( 0.0293, 0.0698, 0.1717) * 10.0, vec3(3.0), pow(1.0 - ray.y, 8.0));\n            vec3 rough = vec3(vec3( 0.0293, 0.0698, 0.1717) + vec3(1.0));\n            return mix(sharp, rough, roughness);\n        }\n\n        float sun(vec3 ray){\n            return pow(max(0.0, dot(ray, normalize(vec3(1.0, 1.0, 0.0)))), 668.0) * 110.0;\n        }\n\n        vec3 getColor(vec2 uv){\n            vec3 ray = getRay(uv);\n            \n            if(ray.y >= -0.01){\n                vec3 C = getatm(ray, 0.0) * 1.0 + sun(ray) * 2.0;\n                return C; \n            }\n            \n            vec3 wfloor = vec3(0.0, -WATER_DEPTH, 0.0);\n            vec3 wceil = vec3(0.0, 0.0, 0.0);\n            vec3 orig = vec3(0.0, 2.0, 0.0);\n            float hihit = intersectPlane(orig, ray, wceil, vec3(0.0, 1.0, 0.0));\n            float lohit = intersectPlane(orig, ray, wfloor, vec3(0.0, 1.0, 0.0));\n            vec3 hipos = orig + ray * hihit;\n            vec3 lopos = orig + ray * lohit;\n            float dist = raymarchwater(orig, hipos, lopos, WATER_DEPTH);\n            vec3 pos = orig + ray * dist;\n\n            vec3 N = normal(pos.xz, 0.01, WATER_DEPTH);\n            vec2 velocity = N.xz * (1.0 - N.y);\n            vec3 R = reflect(ray, N);\n            float roughness = 1.0 - 1.0 / (dist * 0.01 + 1.0);\n            N = normalize(mix(N, vec3(0.0, 1.0, 0.0), roughness));\n            R = normalize(mix(R, N, roughness));\n            R.y = abs(R.y);\n            float fresnel = (0.04 + (1.0-0.04)*(pow(1.0 - max(0.0, dot(-N, ray)), 5.0)));\n            \n            vec3 C = fresnel * (getatm(R, roughness) + sun(R)) * 2.0;\n            \n            return C;\n        }\n\n        vec3 gammacorrect(vec3 c){\n            return pow(c, vec3(1.0 / 2.4));\n        }\n\n        vec3 render(vec2 uv){\n            vec3 ray = getRay(uv);\n            vec3 C = getColor(uv) * 0.3;\n            return gammacorrect(C);  \n        }\n\n        void main()\n        {\n            vec2 uv = vUv;\n\n            gl_FragColor = vec4(render(uv),1.0);\n        }\n        ";return n})),Object(i["a"])(o,"effect49",(function(){var n="\n        uniform vec2 iResolution; \n        uniform float iTime;\n        varying vec2 vUv;\n\n        vec3 Strand(in vec2 fragCoord, in vec3 color, in float hoffset, in float hscale, in float vscale, in float timescale)\n        {\n            float glow = 0.06 * iResolution.y;\n            float twopi = 6.28318530718;\n            float curve = 1.0 - abs(fragCoord.y - (sin(mod(fragCoord.x * hscale / 100.0 / iResolution.x * 1000.0 + iTime * timescale + hoffset, twopi)) * iResolution.y * 0.25 * vscale + iResolution.y / 2.0));\n            float i = clamp(curve, 0.0, 1.0);\n            i += clamp((glow + curve) / glow, 0.0, 1.0) * 0.4 ;\n            return i * color;\n        }\n        \n        vec3 Muzzle(in vec2 fragCoord, in float timescale)\n        {\n            float theta = atan(iResolution.y / 2.0 - fragCoord.y, iResolution.x - fragCoord.x + 0.13 * iResolution.x);\n            float len = iResolution.y * (10.0 + sin(theta * 20.0 + float(int(iTime * 5.0)) * -35.0)) / 11.0;\n            float d = max(-0.6, 1.0 - (sqrt(pow(abs(iResolution.x - fragCoord.x), 2.0) + pow(abs(iResolution.y / 2.0 - ((fragCoord.y - iResolution.y / 2.0) * 4.0 + iResolution.y / 2.0)), 2.0)) / len));\n            return vec3(d * (1.0 + sin(theta * 10.0 + floor(iTime * 5.0) * 10.77) * 0.5), d * (1.0 + -cos(theta * 8.0 - floor(iTime * 20.0) * 8.77) * 0.5), d * (1.0 + -sin(theta * 6.0 - floor(iTime * 20.0) * 134.77) * 0.5));\n        }\n        \n        void main()\n        {\n            vec2 fragCoord = vUv.xy*iResolution.xy;\n            float timescale = 4.0;\n            vec3 c = vec3(0, 0, 0);\n            c += Strand(fragCoord, vec3(1.0, 0, 0), 0.7934 + 1.0 + sin(iTime) * 30.0, 1.0, 0.16, 10.0 * timescale);\n            c += Strand(fragCoord, vec3(0.0, 1.0, 0.0), 0.645 + 1.0 + sin(iTime) * 30.0, 1.5, 0.2, 10.3 * timescale);\n            c += Strand(fragCoord, vec3(0.0, 0.0, 1.0), 0.735 + 1.0 + sin(iTime) * 30.0, 1.3, 0.19, 8.0 * timescale);\n            c += Strand(fragCoord, vec3(1.0, 1.0, 0.0), 0.9245 + 1.0 + sin(iTime) * 30.0, 1.6, 0.14, 12.0 * timescale);\n            c += Strand(fragCoord, vec3(0.0, 1.0, 1.0), 0.7234 + 1.0 + sin(iTime) * 30.0, 1.9, 0.23, 14.0 * timescale);\n            c += Strand(fragCoord, vec3(1.0, 0.0, 1.0), 0.84525 + 1.0 + sin(iTime) * 30.0, 1.2, 0.18, 9.0 * timescale);\n            c += clamp(Muzzle(fragCoord, timescale), 0.0, 1.0);\n            gl_FragColor = vec4(c, 1.0);\n        }";return n})),o)}}]);
//# sourceMappingURL=chunk-2d0e8bc2.5beb5da1.js.map